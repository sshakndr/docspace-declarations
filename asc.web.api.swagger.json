{
  "openapi": "3.0.1",
  "info": {
    "title": "ASC.Web.Api",
    "version": "v2"
  },
  "paths": {
    "/api/2.0/authentication": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Check authentication",
        "responses": {
          "200": {
            "description": "Boolean value: true if the current user is authenticated",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "x-shortName": "Check authentication",
        "description": "Checks if the current user is authenticated or not."
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate a user",
        "requestBody": {
          "description": "Authentication request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              }
            }
          }
        },
        "x-shortName": "Authenticate a user",
        "description": "Authenticates the current user by SMS, authenticator app, or without two-factor authentication."
      }
    },
    "/api/2.0/authentication/{code}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate a user by code",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Authentication request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              }
            }
          }
        },
        "x-shortName": "Authenticate a user by code",
        "description": "Authenticates the current user by SMS or two-factor authentication code."
      }
    },
    "/api/2.0/authentication/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Log out",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          }
        },
        "x-shortName": "Log out",
        "description": "Logs out of the current user account."
      },
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Log out",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          }
        },
        "x-shortName": "Log out",
        "description": "Logs out of the current user account."
      }
    },
    "/api/2.0/authentication/confirm": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Open confirmation email URL",
        "requestBody": {
          "description": "Confirmation email parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Security.Cryptography.EmailValidationKeyModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Security.Cryptography.EmailValidationKeyModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Security.Cryptography.EmailValidationKeyModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Validation result: Ok, Invalid, or Expired",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.ConfirmDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.ConfirmDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.ConfirmDto"
                }
              }
            }
          }
        },
        "x-shortName": "Open confirmation email URL",
        "description": "Opens a confirmation email URL to validate a certain action (employee invitation, portal removal, phone activation, etc.)."
      }
    },
    "/api/2.0/authentication/setphone": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Set a mobile phone",
        "requestBody": {
          "description": "Mobile phone request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.MobileRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.MobileRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.MobileRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              }
            }
          }
        },
        "x-shortName": "Set a mobile phone",
        "description": "Sets a mobile phone for the current user."
      }
    },
    "/api/2.0/authentication/sendsms": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Send SMS code",
        "requestBody": {
          "description": "Authentication request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto"
                }
              }
            }
          }
        },
        "x-shortName": "Send SMS code",
        "description": "Sends SMS with an authentication code."
      }
    },
    "/api/2.0/capabilities": {
      "get": {
        "tags": [
          "Capabilities"
        ],
        "summary": "Get portal capabilities",
        "responses": {
          "200": {
            "description": "Portal capabilities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.CapabilitiesDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.CapabilitiesDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.CapabilitiesDto"
                }
              }
            }
          }
        },
        "x-shortName": "Get portal capabilities",
        "description": "Returns the information about portal capabilities."
      }
    },
    "/api/2.0/capabilities.json": {
      "get": {
        "tags": [
          "Capabilities"
        ],
        "summary": "Get portal capabilities",
        "responses": {
          "200": {
            "description": "Portal capabilities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.CapabilitiesDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.CapabilitiesDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.CapabilitiesDto"
                }
              }
            }
          }
        },
        "x-shortName": "Get portal capabilities",
        "description": "Returns the information about portal capabilities."
      }
    },
    "/api/2.0/migration/list": {
      "get": {
        "tags": [
          "Migration"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/api/2.0/migration/init/{migratorName}": {
      "post": {
        "tags": [
          "Migration"
        ],
        "summary": "",
        "parameters": [
          {
            "name": "migratorName",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "some text"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/api/2.0/migration/status": {
      "get": {
        "tags": [
          "Migration"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.MigrationStatusDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.MigrationStatusDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.MigrationStatusDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/api/2.0/migration/cancel": {
      "post": {
        "tags": [
          "Migration"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/api/2.0/migration/clear": {
      "post": {
        "tags": [
          "Migration"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/api/2.0/migration/migrate": {
      "post": {
        "tags": [
          "Migration"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Migration.Core.Models.Api.MigrationApiInfo"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Migration.Core.Models.Api.MigrationApiInfo"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Migration.Core.Models.Api.MigrationApiInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/api/2.0/migration/logs": {
      "get": {
        "tags": [
          "Migration"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/api/2.0/migration/finish": {
      "post": {
        "tags": [
          "Migration"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.FinishDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.FinishDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.FinishDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/api/2.0/modules": {
      "get": {
        "tags": [
          "Modules"
        ],
        "summary": "Get modules",
        "responses": {
          "200": {
            "description": "List of modules",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get modules",
        "description": "Returns a list of all the portal modules."
      }
    },
    "/api/2.0/modules/info": {
      "get": {
        "tags": [
          "Modules"
        ],
        "summary": "Get modules information",
        "responses": {
          "200": {
            "description": "List of modules with their information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Api.Core.Module"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Api.Core.Module"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Api.Core.Module"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get modules information",
        "description": "Returns a list of all the portal modules with their information."
      }
    },
    "/api/2.0/portal/usedspace": {
      "get": {
        "tags": [
          "Portal / Quota"
        ],
        "summary": "Get the used portal space",
        "responses": {
          "200": {
            "description": "Used portal space",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              "text/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the used portal space",
        "description": "Returns the used space of the current portal."
      }
    },
    "/api/2.0/portal/tariff": {
      "get": {
        "tags": [
          "Portal / Quota"
        ],
        "summary": "Get a portal tariff",
        "parameters": [
          {
            "name": "refresh",
            "in": "query",
            "description": "Specifies whether the tariff will be refreshed",
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Current portal tariff",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Billing.Tariff"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Billing.Tariff"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Billing.Tariff"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a portal tariff",
        "description": "Returns the current portal tariff."
      }
    },
    "/api/2.0/portal/quota": {
      "get": {
        "tags": [
          "Portal / Quota"
        ],
        "summary": "Get a portal quota",
        "responses": {
          "200": {
            "description": "Current portal quota",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantQuota"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantQuota"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantQuota"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a portal quota",
        "description": "Returns the current portal quota."
      }
    },
    "/api/2.0/portal/quota/right": {
      "get": {
        "tags": [
          "Portal / Quota"
        ],
        "summary": "Get the recommended quota",
        "responses": {
          "200": {
            "description": "Recommended portal quota",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantQuota"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantQuota"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantQuota"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the recommended quota",
        "description": "Returns the recommended quota for the current portal."
      }
    },
    "/api/2.0/portal": {
      "get": {
        "tags": [
          "Portal / Settings"
        ],
        "summary": "Get a portal",
        "responses": {
          "200": {
            "description": "Current portal information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.TenantDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.TenantDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.TenantDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a portal",
        "description": "Returns the current portal."
      }
    },
    "/api/2.0/portal/getshortenlink": {
      "put": {
        "tags": [
          "Portal / Settings"
        ],
        "summary": "Get a shortened link",
        "requestBody": {
          "description": "Shortened link request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.ShortenLinkRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.ShortenLinkRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.ShortenLinkRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shortened link",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a shortened link",
        "description": "Returns a link specified in the request in the shortened format."
      }
    },
    "/api/2.0/portal/path": {
      "get": {
        "tags": [
          "Portal / Settings"
        ],
        "summary": "Get a path to the portal",
        "parameters": [
          {
            "name": "virtualPath",
            "in": "query",
            "description": "Portal virtual path",
            "schema": {
              "type": "string"
            },
            "example": "some text"
          }
        ],
        "responses": {
          "200": {
            "description": "Portal path",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a path to the portal",
        "description": "Returns the full absolute path to the current portal."
      }
    },
    "/api/2.0/portal/suspend": {
      "post": {
        "tags": [
          "Portal / Settings"
        ],
        "summary": "Send suspension instructions",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Send suspension instructions",
        "description": "Sends the instructions to suspend the current portal."
      },
      "put": {
        "tags": [
          "Portal / Settings"
        ],
        "summary": "Deactivate a portal",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Deactivate a portal",
        "description": "Deactivates the current portal."
      }
    },
    "/api/2.0/portal/delete": {
      "post": {
        "tags": [
          "Portal / Settings"
        ],
        "summary": "Send removal instructions",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Send removal instructions",
        "description": "Sends the instructions to remove the current portal."
      },
      "delete": {
        "tags": [
          "Portal / Settings"
        ],
        "summary": "Delete a portal",
        "responses": {
          "200": {
            "description": "URL to the feedback form about removing a portal",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Delete a portal",
        "description": "Deletes the current portal."
      }
    },
    "/api/2.0/portal/continue": {
      "put": {
        "tags": [
          "Portal / Settings"
        ],
        "summary": "Restore a portal",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Restore a portal",
        "description": "Restores the current portal."
      }
    },
    "/api/2.0/portal/users/{userID}": {
      "get": {
        "tags": [
          "Portal / Users"
        ],
        "summary": "Get a user by ID",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "9924256A-739C-462b-AF15-E652A3B1B6EB"
          }
        ],
        "responses": {
          "200": {
            "description": "User information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Users.UserInfo"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Users.UserInfo"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Users.UserInfo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a user by ID",
        "description": "Returns a user with the ID specified in the request from the current portal."
      }
    },
    "/api/2.0/portal/users/invite/{employeeType}": {
      "get": {
        "tags": [
          "Portal / Users"
        ],
        "summary": "Get an invitation link",
        "parameters": [
          {
            "name": "employeeType",
            "in": "path",
            "description": "Employee type (All, RoomAdmin, User, DocSpaceAdmin)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ASC.Core.Users.EmployeeType"
            },
            "example": "All"
          }
        ],
        "responses": {
          "200": {
            "description": "Invitation link",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get an invitation link",
        "description": "Returns an invitation link for joining the portal."
      }
    },
    "/api/2.0/portal/userscount": {
      "get": {
        "tags": [
          "Portal / Users"
        ],
        "summary": "Get a number of portal users",
        "responses": {
          "200": {
            "description": "Number of portal users",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a number of portal users",
        "description": "Returns a number of portal users."
      }
    },
    "/api/2.0/portal/present/mark": {
      "post": {
        "tags": [
          "Portal / Users"
        ],
        "summary": "Mark a gift message as read",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Mark a gift message as read",
        "description": "Marks a gift message as read."
      }
    },
    "/api/2.0/portal/sendcongratulations": {
      "post": {
        "tags": [
          "Portal / Users"
        ],
        "summary": "Send congratulations",
        "parameters": [
          {
            "name": "Userid",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "User ID",
              "format": "uuid",
              "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
            }
          },
          {
            "name": "Key",
            "in": "query",
            "schema": {
              "type": "string",
              "description": "Email key",
              "example": "some text"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "x-shortName": "Send congratulations",
        "description": "Sends congratulations to the user after registering the portal."
      }
    },
    "/api/2.0/security/activeconnections": {
      "get": {
        "tags": [
          "Security / Active connections"
        ],
        "summary": "Get active connections",
        "responses": {
          "200": {
            "description": "Active portal connections",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.ActiveConnectionsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.ActiveConnectionsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.ActiveConnectionsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get active connections",
        "description": "Returns all the active connections to the portal."
      }
    },
    "/api/2.0/security/activeconnections/logoutallchangepassword": {
      "put": {
        "tags": [
          "Security / Active connections"
        ],
        "summary": "Log out and change password",
        "responses": {
          "200": {
            "description": "URL to the confirmation message for changing a password",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Log out and change password",
        "description": "Logs out from all the active connections of the current user and changes their password."
      }
    },
    "/api/2.0/security/activeconnections/logoutall/{userId}": {
      "put": {
        "tags": [
          "Security / Active connections"
        ],
        "summary": "Log out for the user by ID",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "9924256A-739C-462b-AF15-E652A3B1B6EB"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Log out for the user by ID",
        "description": "Logs out from all the active connections of the user with the ID specified in the request."
      }
    },
    "/api/2.0/security/activeconnections/logoutallexceptthis": {
      "put": {
        "tags": [
          "Security / Active connections"
        ],
        "summary": "Log out from all connections",
        "responses": {
          "200": {
            "description": "Current user name",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Log out from all connections",
        "description": "Logs out from all the active connections except the current connection."
      }
    },
    "/api/2.0/security/activeconnections/logout/{loginEventId}": {
      "put": {
        "tags": [
          "Security / Active connections"
        ],
        "summary": "Log out from the connection",
        "parameters": [
          {
            "name": "loginEventId",
            "in": "path",
            "description": "Login event ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1234
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true if the operation is successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Log out from the connection",
        "description": "Logs out from the connection with the ID specified in the request."
      }
    },
    "/api/2.0/security/audit/events/last": {
      "get": {
        "tags": [
          "Security / Audit trail data"
        ],
        "summary": "Get audit trail data",
        "responses": {
          "200": {
            "description": "List of audit trail data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuditEventDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuditEventDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuditEventDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get audit trail data",
        "description": "Returns a list of the latest changes (creation, modification, deletion, etc.) made by users to the entities (tasks, opportunities, files, etc.) on the portal."
      }
    },
    "/api/2.0/security/audit/events/filter": {
      "get": {
        "tags": [
          "Security / Audit trail data"
        ],
        "summary": "Get filtered audit trail data",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "9924256A-739C-462b-AF15-E652A3B1B6EB"
          },
          {
            "name": "productType",
            "in": "query",
            "description": "Product",
            "schema": {
              "$ref": "#/components/schemas/ASC.AuditTrail.Types.ProductType"
            }
          },
          {
            "name": "moduleType",
            "in": "query",
            "description": "Module",
            "schema": {
              "$ref": "#/components/schemas/ASC.AuditTrail.Types.ModuleType"
            }
          },
          {
            "name": "actionType",
            "in": "query",
            "description": "Action type",
            "schema": {
              "$ref": "#/components/schemas/ASC.AuditTrail.Types.ActionType"
            }
          },
          {
            "name": "action",
            "in": "query",
            "description": "Action",
            "schema": {
              "$ref": "#/components/schemas/ASC.MessagingSystem.Core.MessageAction"
            },
            "example": null
          },
          {
            "name": "entryType",
            "in": "query",
            "description": "Entry",
            "schema": {
              "$ref": "#/components/schemas/ASC.AuditTrail.Types.EntryType"
            }
          },
          {
            "name": "target",
            "in": "query",
            "description": "Target",
            "schema": {
              "type": "string"
            },
            "example": "some text"
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "schema": {
              "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "schema": {
              "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of filtered audit trail data",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuditEventDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuditEventDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.AuditEventDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get filtered audit trail data",
        "description": "Returns a list of the audit events by the parameters specified in the request."
      }
    },
    "/api/2.0/security/audit/types": {
      "get": {
        "tags": [
          "Security / Audit trail data"
        ],
        "summary": "Get audit trail types",
        "responses": {
          "200": {
            "description": "Audit trail types",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          }
        },
        "x-shortName": "Get audit trail types",
        "description": "Returns all the available audit trail types."
      }
    },
    "/api/2.0/security/audit/mappers": {
      "get": {
        "tags": [
          "Security / Audit trail data"
        ],
        "summary": "Get audit trail mappers",
        "parameters": [
          {
            "name": "productType",
            "in": "query",
            "description": "Product",
            "schema": {
              "$ref": "#/components/schemas/ASC.AuditTrail.Types.ProductType"
            }
          },
          {
            "name": "moduleType",
            "in": "query",
            "description": "Module",
            "schema": {
              "$ref": "#/components/schemas/ASC.AuditTrail.Types.ModuleType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit trail mappers",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          }
        },
        "x-shortName": "Get audit trail mappers",
        "description": "Returns the mappers for the audit trail types."
      }
    },
    "/api/2.0/security/audit/events/report": {
      "post": {
        "tags": [
          "Security / Audit trail data"
        ],
        "summary": "Generate the audit trail report",
        "responses": {
          "200": {
            "description": "URL to the xlsx report file",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Generate the audit trail report",
        "description": "Generates the audit trail report."
      }
    },
    "/api/2.0/security/audit/settings/lifetime": {
      "get": {
        "tags": [
          "Security / Audit trail data"
        ],
        "summary": "Get the audit trail settings",
        "responses": {
          "200": {
            "description": "Audit settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantAuditSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantAuditSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantAuditSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the audit trail settings",
        "description": "Returns the audit trail settings."
      },
      "post": {
        "tags": [
          "Security / Audit trail data"
        ],
        "summary": "Set the audit trail settings",
        "requestBody": {
          "description": "Audit trail settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Core.Tenants.TenantAuditSettingsWrapper"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Core.Tenants.TenantAuditSettingsWrapper"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Core.Tenants.TenantAuditSettingsWrapper"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Audit trail settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantAuditSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantAuditSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantAuditSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Set the audit trail settings",
        "description": "Sets the audit trail settings for the current portal."
      }
    },
    "/api/2.0/security/csp": {
      "post": {
        "tags": [
          "Security / CSP"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.CspRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.CspRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.CspRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CspDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CspDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CspDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Security / CSP"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CspDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CspDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CspDto"
                }
              }
            }
          }
        }
      }
    },
    "/api/2.0/settings/push/docregisterdevice": {
      "post": {
        "tags": [
          "Security / Firebase"
        ],
        "summary": "Save the Documents Firebase device token",
        "requestBody": {
          "description": "Firebase request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.FirebaseRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.FirebaseRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.FirebaseRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FireBase user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Common.EF.FireBaseUser"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Common.EF.FireBaseUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Common.EF.FireBaseUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the Documents Firebase device token",
        "description": "Saves the Firebase device token specified in the request for the Documents application."
      }
    },
    "/api/2.0/settings/push/docsubscribe": {
      "put": {
        "tags": [
          "Security / Firebase"
        ],
        "summary": "Subscribe to Documents push notification",
        "requestBody": {
          "description": "Firebase request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.FirebaseRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.FirebaseRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.FirebaseRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "FireBase user",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Common.EF.FireBaseUser"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Common.EF.FireBaseUser"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Common.EF.FireBaseUser"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Subscribe to Documents push notification",
        "description": "Subscribes to the Documents push notification."
      }
    },
    "/api/2.0/security/audit/login/last": {
      "get": {
        "tags": [
          "Security / Login history"
        ],
        "summary": "Get login history",
        "responses": {
          "200": {
            "description": "List of login events",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.LoginEventDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.LoginEventDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.LoginEventDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get login history",
        "description": "Returns all the latest user login activity, including successful logins and error logs."
      }
    },
    "/api/2.0/security/audit/login/filter": {
      "get": {
        "tags": [
          "Security / Login history"
        ],
        "summary": "Get filtered login events",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "9924256A-739C-462b-AF15-E652A3B1B6EB"
          },
          {
            "name": "action",
            "in": "query",
            "description": "Action",
            "schema": {
              "$ref": "#/components/schemas/ASC.MessagingSystem.Core.MessageAction"
            },
            "example": null
          },
          {
            "name": "from",
            "in": "query",
            "description": "Start date",
            "schema": {
              "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "End date",
            "schema": {
              "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of filtered login events",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.LoginEventDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.LoginEventDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.LoginEventDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get filtered login events",
        "description": "Returns a list of the login events by the parameters specified in the request."
      }
    },
    "/api/2.0/security/audit/login/report": {
      "post": {
        "tags": [
          "Security / Login history"
        ],
        "summary": "Generate the login history report",
        "responses": {
          "200": {
            "description": "URL to the xlsx report file",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Generate the login history report",
        "description": "Generates the login history report."
      }
    },
    "/api/2.0/smtpsettings/smtp": {
      "get": {
        "tags": [
          "Security / SMTP settings"
        ],
        "summary": "Get the SMTP settings",
        "responses": {
          "200": {
            "description": "SMTP settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the SMTP settings",
        "description": "Returns the current portal SMTP settings."
      },
      "post": {
        "tags": [
          "Security / SMTP settings"
        ],
        "summary": "Save the SMTP settings",
        "requestBody": {
          "description": "SMTP settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SMTP settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the SMTP settings",
        "description": "Saves the SMTP settings for the current portal."
      },
      "delete": {
        "tags": [
          "Security / SMTP settings"
        ],
        "summary": "Reset the SMTP settings",
        "responses": {
          "200": {
            "description": "Default SMTP settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Reset the SMTP settings",
        "description": "Resets the SMTP settings of the current portal."
      }
    },
    "/api/2.0/smtpsettings/smtp/test": {
      "get": {
        "tags": [
          "Security / SMTP settings"
        ],
        "summary": "Test the SMTP settings",
        "responses": {
          "200": {
            "description": "SMTP operation status",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Api.Settings.Smtp.SmtpOperationStatusRequestsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Api.Settings.Smtp.SmtpOperationStatusRequestsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Api.Settings.Smtp.SmtpOperationStatusRequestsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Test the SMTP settings",
        "description": "Tests the SMTP settings for the current portal (sends test message to the user email)."
      }
    },
    "/api/2.0/smtpsettings/smtp/test/status": {
      "get": {
        "tags": [
          "Security / SMTP settings"
        ],
        "summary": "Get the SMTP test process status",
        "responses": {
          "200": {
            "description": "SMTP operation status",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Api.Settings.Smtp.SmtpOperationStatusRequestsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Api.Settings.Smtp.SmtpOperationStatusRequestsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Api.Settings.Smtp.SmtpOperationStatusRequestsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the SMTP test process status",
        "description": "Returns the SMTP test process status."
      }
    },
    "/api/2.0/settings/authservice": {
      "get": {
        "tags": [
          "Settings / Authorization"
        ],
        "summary": "Get the authorization services",
        "responses": {
          "200": {
            "description": "Authorization services",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthServiceRequestsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthServiceRequestsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthServiceRequestsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the authorization services",
        "description": "Returns the authorization services."
      },
      "post": {
        "tags": [
          "Settings / Authorization"
        ],
        "summary": "Save the authorization keys",
        "requestBody": {
          "description": "Request parameters for authorization service",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthServiceRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthServiceRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AuthServiceRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Boolean value: true if the authorization keys are changed",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the authorization keys",
        "description": "Saves the authorization keys."
      }
    },
    "/api/2.0/settings": {
      "get": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Get the portal settings",
        "parameters": [
          {
            "name": "withpassword",
            "in": "query",
            "description": "Specifies if the password hasher settings will be returned or not",
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SettingsDto"
                }
              }
            }
          }
        },
        "x-shortName": "Get the portal settings",
        "description": "Returns a list of all the available portal settings with the current values for each parameter."
      }
    },
    "/api/2.0/settings/maildomainsettings": {
      "post": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Save the mail domain settings",
        "requestBody": {
          "description": "Request parameters for mail domain settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.MailDomainSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.MailDomainSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.MailDomainSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message about the result of saving the mail domain settings",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the mail domain settings",
        "description": "Saves the mail domain settings specified in the request to the portal."
      }
    },
    "/api/2.0/settings/cultures": {
      "get": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Get supported languages",
        "responses": {
          "200": {
            "description": "List of all the available portal languages",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-shortName": "Get supported languages",
        "description": "Returns a list of all the available portal languages in the format of a two-letter or four-letter language code (e.g. \"de\", \"en-US\", etc.)."
      }
    },
    "/api/2.0/settings/timezones": {
      "get": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Get time zones",
        "responses": {
          "200": {
            "description": "List of all the available time zones with their IDs and display names",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TimezonesRequestsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TimezonesRequestsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TimezonesRequestsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get time zones",
        "description": "Returns a list of all the available portal time zones."
      }
    },
    "/api/2.0/settings/machine": {
      "get": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Get hostname",
        "responses": {
          "200": {
            "description": "Portal hostname",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get hostname",
        "description": "Returns the portal hostname."
      }
    },
    "/api/2.0/settings/dns": {
      "put": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Save the DNS settings",
        "requestBody": {
          "description": "DNS settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.Models.DnsSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.Models.DnsSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.Models.DnsSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message about changing DNS",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the DNS settings",
        "description": "Saves the DNS settings specified in the request to the current portal."
      }
    },
    "/api/2.0/settings/logo": {
      "get": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Get a portal logo",
        "responses": {
          "200": {
            "description": "Portal logo image URL",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a portal logo",
        "description": "Returns the portal logo image URL."
      }
    },
    "/api/2.0/settings/wizard/complete": {
      "put": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Complete the Wizard settings",
        "requestBody": {
          "description": "Wizard settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WizardRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WizardRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WizardRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wizard settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.Utility.Settings.WizardSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.Utility.Settings.WizardSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.Utility.Settings.WizardSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Complete the Wizard settings",
        "description": "Completes the Wizard settings."
      }
    },
    "/api/2.0/settings/colortheme": {
      "get": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Get a color theme",
        "responses": {
          "200": {
            "description": "Settings of the portal themes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CustomColorThemesSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CustomColorThemesSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CustomColorThemesSettingsDto"
                }
              }
            }
          }
        },
        "x-shortName": "Get a color theme",
        "description": "Returns the portal color theme."
      },
      "put": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Save a color theme",
        "requestBody": {
          "description": "Portal theme settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.CustomColorThemesSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.CustomColorThemesSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.CustomColorThemesSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Portal theme settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CustomColorThemesSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CustomColorThemesSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CustomColorThemesSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save a color theme",
        "description": "Saves the portal color theme specified in the request."
      },
      "delete": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Delete a color theme",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "Portal theme ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1234
          }
        ],
        "responses": {
          "200": {
            "description": "Portal theme settings: custom color theme settings, selected or not, limit",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CustomColorThemesSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CustomColorThemesSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CustomColorThemesSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Delete a color theme",
        "description": "Deletes the portal color theme with the ID specified in the request."
      }
    },
    "/api/2.0/settings/closeadminhelper": {
      "put": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Close the admin helper notification",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Close the admin helper notification",
        "description": "Closes the admin helper notification."
      }
    },
    "/api/2.0/settings/emailactivation": {
      "put": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Update the email activation settings",
        "requestBody": {
          "description": "Email activation settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Studio.Core.EmailActivationSettings"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Studio.Core.EmailActivationSettings"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Studio.Core.EmailActivationSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated email activation settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.EmailActivationSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.EmailActivationSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.EmailActivationSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update the email activation settings",
        "description": "Updates the email activation settings."
      }
    },
    "/api/2.0/settings/socket": {
      "get": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Get the socket settings",
        "responses": {
          "200": {
            "description": "Socket settings: hub URL",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the socket settings",
        "description": "Returns the socket settings."
      }
    },
    "/api/2.0/settings/payment": {
      "get": {
        "tags": [
          "Settings / Common settings"
        ],
        "summary": "Get the payment settings",
        "responses": {
          "200": {
            "description": "Payment settings: sales email, feedback and support URL, link to pay for a portal, Standalone or not, current license, maximum quota quantity",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the payment settings",
        "description": "Returns the portal payment settings."
      }
    },
    "/api/2.0/settings/cookiesettings": {
      "get": {
        "tags": [
          "Settings / Cookies"
        ],
        "summary": "Get cookies lifetime",
        "responses": {
          "200": {
            "description": "Lifetime value in minutes",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CookieSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CookieSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CookieSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get cookies lifetime",
        "description": "Returns the cookies lifetime value in minutes."
      },
      "put": {
        "tags": [
          "Settings / Cookies"
        ],
        "summary": "Update cookies lifetime",
        "requestBody": {
          "description": "Cookies settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.Models.CookieSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.Models.CookieSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.Models.CookieSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message about the result of saving new settings",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update cookies lifetime",
        "description": "Updates the cookies lifetime value in minutes."
      }
    },
    "/api/2.0/settings/customnavigation/getall": {
      "get": {
        "tags": [
          "Settings / Custom Navigation"
        ],
        "summary": "Get the custom navigation items",
        "responses": {
          "200": {
            "description": "List of the custom navigation items",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the custom navigation items",
        "description": "Returns a list of the custom navigation items."
      }
    },
    "/api/2.0/settings/customnavigation/getsample": {
      "get": {
        "tags": [
          "Settings / Custom Navigation"
        ],
        "summary": "Get a custom navigation item sample",
        "responses": {
          "200": {
            "description": "Custom navigation item",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a custom navigation item sample",
        "description": "Returns a custom navigation item sample."
      }
    },
    "/api/2.0/settings/customnavigation/get/{id}": {
      "get": {
        "tags": [
          "Settings / Custom Navigation"
        ],
        "summary": "Get a custom navigation item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Custom navigation item ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "9924256A-739C-462b-AF15-E652A3B1B6EB"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom navigation item",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a custom navigation item by ID",
        "description": "Returns a custom navigation item by the ID specified in the request."
      }
    },
    "/api/2.0/settings/customnavigation/create": {
      "post": {
        "tags": [
          "Settings / Custom Navigation"
        ],
        "summary": "Add a custom navigation item",
        "requestBody": {
          "description": "Custom navigation parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom navigation item",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.CustomNavigationItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Add a custom navigation item",
        "description": "Adds a custom navigation item with the parameters specified in the request."
      }
    },
    "/api/2.0/settings/customnavigation/delete/{id}": {
      "delete": {
        "tags": [
          "Settings / Custom Navigation"
        ],
        "summary": "Delete a custom navigation item",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Custom navigation item ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Delete a custom navigation item",
        "description": "Deletes a custom navigation item with the ID specified in the request."
      }
    },
    "/api/2.0/settings/encryption/start": {
      "post": {
        "tags": [
          "Settings / Encryption"
        ],
        "summary": "Start the storage encryption process",
        "requestBody": {
          "description": "Storage encryption request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.StorageEncryptionRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.StorageEncryptionRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.StorageEncryptionRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Boolean value: true if the operation is successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Start the storage encryption process",
        "description": "Starts the storage encryption process."
      }
    },
    "/api/2.0/settings/encryption/progress": {
      "get": {
        "tags": [
          "Settings / Encryption"
        ],
        "summary": "Get the storage encryption progress",
        "responses": {
          "200": {
            "description": "Storage encryption progress",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              "text/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the storage encryption progress",
        "description": "Returns the storage encryption progress."
      }
    },
    "/api/2.0/settings/greetingsettings": {
      "get": {
        "tags": [
          "Settings / Greeting settings"
        ],
        "summary": "Get greeting settings",
        "responses": {
          "200": {
            "description": "Greeting settings: tenant name",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get greeting settings",
        "description": "Returns the greeting settings for the current portal."
      },
      "post": {
        "tags": [
          "Settings / Greeting settings"
        ],
        "summary": "Save the greeting settings",
        "requestBody": {
          "description": "Greeting settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.GreetingSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.GreetingSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.GreetingSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message about saving greeting settings successfully",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the greeting settings",
        "description": "Saves the greeting settings specified in the request to the current portal."
      }
    },
    "/api/2.0/settings/greetingsettings/isdefault": {
      "get": {
        "tags": [
          "Settings / Greeting settings"
        ],
        "summary": "Check the default greeting settings",
        "responses": {
          "200": {
            "description": "Boolean value: true if the greeting settings of the current portal are set to default",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Check the default greeting settings",
        "description": "Checks if the greeting settings of the current portal are set to default or not."
      }
    },
    "/api/2.0/settings/greetingsettings/restore": {
      "post": {
        "tags": [
          "Settings / Greeting settings"
        ],
        "summary": "Restore the greeting settings",
        "responses": {
          "200": {
            "description": "Greeting settings: tenant name",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Restore the greeting settings",
        "description": "Restores the current portal greeting settings."
      }
    },
    "/api/2.0/settings/iprestrictions": {
      "get": {
        "tags": [
          "Settings / IP restrictions"
        ],
        "summary": "Get the IP portal restrictions",
        "responses": {
          "200": {
            "description": "List of IP restrictions parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IPRestriction"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IPRestriction"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IPRestriction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the IP portal restrictions",
        "description": "Returns the IP portal restrictions."
      },
      "put": {
        "tags": [
          "Settings / IP restrictions"
        ],
        "summary": "Save the IP restrictions",
        "requestBody": {
          "description": "IP restrictions request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.IpRestrictionsBaseRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.IpRestrictionsBaseRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.IpRestrictionsBaseRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "List of IP restrictions parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IpRestrictionBase"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IpRestrictionBase"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IpRestrictionBase"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the IP restrictions",
        "description": "Saves the new portal IP restrictions specified in the request."
      }
    },
    "/api/2.0/settings/iprestrictions/settings": {
      "get": {
        "tags": [
          "Settings / IP restrictions"
        ],
        "summary": "Get the IP restriction settings",
        "responses": {
          "200": {
            "description": "IP restriction settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IPRestrictionsSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IPRestrictionsSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IPRestrictionsSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the IP restriction settings",
        "description": "Returns the IP restriction settings."
      },
      "put": {
        "tags": [
          "Settings / IP restrictions"
        ],
        "summary": "Update the IP restriction settings",
        "requestBody": {
          "description": "New IP restriction settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.IpRestrictionsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.IpRestrictionsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.IpRestrictionsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated IP restriction settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IPRestrictionsSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IPRestrictionsSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.IPSecurity.IPRestrictionsSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update the IP restriction settings",
        "description": "Updates the IP restriction settings with a parameter specified in the request."
      }
    },
    "/api/2.0/settings/license/refresh": {
      "get": {
        "tags": [
          "Settings / License"
        ],
        "summary": "Refresh the license",
        "responses": {
          "200": {
            "description": "Boolean value: true if the operation is successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Refresh the license",
        "description": "Refreshes the license."
      }
    },
    "/api/2.0/settings/license/accept": {
      "post": {
        "tags": [
          "Settings / License"
        ],
        "summary": "Activate a license",
        "responses": {
          "200": {
            "description": "Message about the result of activating license",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Activate a license",
        "description": "Activates a license for the portal."
      }
    },
    "/api/2.0/settings/license/required": {
      "get": {
        "tags": [
          "Settings / License"
        ],
        "summary": "Request a license",
        "responses": {
          "200": {
            "description": "Boolean value: true if the license is required",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "x-shortName": "Request a license",
        "description": "Requests a portal license if necessary."
      }
    },
    "/api/2.0/settings/license": {
      "post": {
        "tags": [
          "Settings / License"
        ],
        "summary": "Upload a license",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "License attachments"
                  }
                }
              },
              "encoding": {
                "Files": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "License",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Upload a license",
        "description": "Uploads a portal license specified in the request."
      }
    },
    "/api/2.0/settings/security/loginSettings": {
      "put": {
        "tags": [
          "Settings / Login settings"
        ],
        "summary": "Update login settings",
        "requestBody": {
          "description": "Login settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.LoginSettingsRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.LoginSettingsRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.LoginSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated login settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.LoginSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.LoginSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.LoginSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update login settings",
        "description": "Updates the login settings with the parameters specified in the request."
      },
      "get": {
        "tags": [
          "Settings / Login settings"
        ],
        "summary": "Get login settings",
        "responses": {
          "200": {
            "description": "Login settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.LoginSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.LoginSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.LoginSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get login settings",
        "description": "Returns the portal login settings."
      }
    },
    "/api/2.0/settings/messagesettings": {
      "post": {
        "tags": [
          "Settings / Messages"
        ],
        "summary": "Enable the administrator message settings",
        "requestBody": {
          "description": "Request parameters for administrator message settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TurnOnAdminMessageSettingsRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TurnOnAdminMessageSettingsRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TurnOnAdminMessageSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message about the result of saving new settings",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Enable the administrator message settings",
        "description": "Displays the contact form on the \"Sign In\" page, allowing users to send a message to the DocSpace administrator in case they encounter any issues while accessing DocSpace."
      }
    },
    "/api/2.0/settings/sendadmmail": {
      "post": {
        "tags": [
          "Settings / Messages"
        ],
        "summary": "Send a message to the administrator",
        "requestBody": {
          "description": "Request parameters for administrator message settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AdminMessageSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AdminMessageSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AdminMessageSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message about the result of sending a message",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          }
        },
        "x-shortName": "Send a message to the administrator",
        "description": "Sends a message to the administrator email when unauthorized users encounter issues accessing DocSpace."
      }
    },
    "/api/2.0/settings/sendjoininvite": {
      "post": {
        "tags": [
          "Settings / Messages"
        ],
        "summary": "Sends an invitation email",
        "requestBody": {
          "description": "Request parameters for administrator message settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AdminMessageBaseSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AdminMessageBaseSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.AdminMessageBaseSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message about sending a link to confirm joining the DocSpace",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          }
        },
        "x-shortName": "Sends an invitation email",
        "description": "Sends an invitation email with a link to the DocSpace."
      }
    },
    "/api/2.0/settings/notification/{type}": {
      "get": {
        "tags": [
          "Settings / Notifications"
        ],
        "summary": "Check notification availability",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Notification type (Badges, RoomsActivity, DailyFeed, UsefullTips)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ASC.Web.Core.Notify.NotificationType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notification settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.NotificationSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.NotificationSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.NotificationSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Check notification availability",
        "description": "Checks if the notification type specified in the request is enabled or not."
      }
    },
    "/api/2.0/settings/notification": {
      "post": {
        "tags": [
          "Settings / Notifications"
        ],
        "summary": "Enable notifications",
        "requestBody": {
          "description": "Notification settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.NotificationSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.NotificationSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.NotificationSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.NotificationSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.NotificationSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.NotificationSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Enable notifications",
        "description": "Enables the notification type specified in the request."
      }
    },
    "/api/2.0/settings/notification/rooms": {
      "get": {
        "tags": [
          "Settings / Notifications"
        ],
        "summary": "Get room notification settings",
        "responses": {
          "200": {
            "description": "Room notification settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.RoomsNotificationSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.RoomsNotificationSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.RoomsNotificationSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get room notification settings",
        "description": "Returns a list of rooms with the disabled notifications"
      },
      "post": {
        "tags": [
          "Settings / Notifications"
        ],
        "summary": "Set room notification status",
        "requestBody": {
          "description": "Request parameters for the room notification settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.RoomsNotificationsSettingsRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.RoomsNotificationsSettingsRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.RoomsNotificationsSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Room notification settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.RoomsNotificationSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.RoomsNotificationSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.RoomsNotificationSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Set room notification status",
        "description": "Sets a notification status for a room with the ID specified in the request."
      }
    },
    "/api/2.0/settings/owner": {
      "post": {
        "tags": [
          "Settings / Owner"
        ],
        "summary": "Send the owner change instructions",
        "requestBody": {
          "description": "Settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.OwnerIdSettingsRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.OwnerIdSettingsRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.OwnerIdSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Message about changing the portal owner",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Send the owner change instructions",
        "description": "Sends the instructions to change the DocSpace owner."
      },
      "put": {
        "tags": [
          "Settings / Owner"
        ],
        "summary": "Update the portal owner",
        "requestBody": {
          "description": "Settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.OwnerIdSettingsRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.OwnerIdSettingsRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.OwnerIdSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update the portal owner",
        "description": "Updates the current portal owner with a new one specified in the request."
      }
    },
    "/api/2.0/settings/userquotasettings": {
      "get": {
        "tags": [
          "Settings / Quota"
        ],
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/api/2.0/settings/roomquotasettings": {
      "post": {
        "tags": [
          "Settings / Quota"
        ],
        "summary": "Save the room quota settings",
        "requestBody": {
          "description": "Request parameters for the quota settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.QuotaSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.QuotaSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.QuotaSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tenant room quota settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantRoomQuotaSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantRoomQuotaSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantRoomQuotaSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the room quota settings",
        "description": "Saves the room quota settings specified in the request to the current portal."
      }
    },
    "/api/2.0/settings/tenantquotasettings": {
      "put": {
        "tags": [
          "Settings / Quota"
        ],
        "summary": "Save the tenant quota settings",
        "requestBody": {
          "description": "Request parameters for the tenant quota settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TenantQuotaSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TenantQuotaSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TenantQuotaSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tenant quota settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantQuotaSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantQuotaSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Core.Tenants.TenantQuotaSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the tenant quota settings",
        "description": "Saves the tenant quota settings specified in the request to the current portal."
      }
    },
    "/api/2.0/settings/whitelabel/save": {
      "post": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Save the white label settings",
        "parameters": [
          {
            "name": "IsDark",
            "in": "query",
            "description": "Specifies if the logo is for a dark theme or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsDefault",
            "in": "query",
            "description": "Specifies if the logo is for a default tenant or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Request parameters for white label settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WhiteLabelRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WhiteLabelRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WhiteLabelRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Boolean value: true if the operation is sucessful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the white label settings",
        "description": "Saves the white label settings specified in the request."
      }
    },
    "/api/2.0/settings/whitelabel/savefromfiles": {
      "post": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Save the white label settings from files",
        "parameters": [
          {
            "name": "IsDark",
            "in": "query",
            "description": "Specifies if the logo is for a dark theme or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsDefault",
            "in": "query",
            "description": "Specifies if the logo is for a default tenant or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true if the operation is sucessful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the white label settings from files",
        "description": "Saves the white label settings from files."
      }
    },
    "/api/2.0/settings/whitelabel/logos": {
      "get": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Get the white label logos",
        "parameters": [
          {
            "name": "IsDark",
            "in": "query",
            "description": "Specifies if the logo is for a dark theme or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsDefault",
            "in": "query",
            "description": "Specifies if the logo is for a default tenant or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "White label logos",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WhiteLabelItemDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WhiteLabelItemDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WhiteLabelItemDto"
                }
              }
            }
          }
        },
        "x-shortName": "Get the white label logos",
        "description": "Returns the white label logos."
      }
    },
    "/api/2.0/settings/whitelabel/logos/isdefault": {
      "get": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Check the default white label logos",
        "parameters": [
          {
            "name": "IsDark",
            "in": "query",
            "description": "Specifies if the logo is for a dark theme or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsDefault",
            "in": "query",
            "description": "Specifies if the logo is for a default tenant or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Request properties of white label logos",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.IsDefaultWhiteLabelLogosDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.IsDefaultWhiteLabelLogosDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.IsDefaultWhiteLabelLogosDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Check the default white label logos",
        "description": "Specifies if the white label logos are default or not."
      }
    },
    "/api/2.0/settings/whitelabel/logotext": {
      "get": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Get the white label logo text",
        "parameters": [
          {
            "name": "IsDark",
            "in": "query",
            "description": "Specifies if the logo is for a dark theme or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsDefault",
            "in": "query",
            "description": "Specifies if the logo is for a default tenant or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logo text",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the white label logo text",
        "description": "Returns the white label logo text."
      }
    },
    "/api/2.0/settings/whitelabel/restore": {
      "put": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Restore the white label options",
        "parameters": [
          {
            "name": "IsDark",
            "in": "query",
            "description": "Specifies if the logo is for a dark theme or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsDefault",
            "in": "query",
            "description": "Specifies if the logo is for a default tenant or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true if the operation is successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Restore the white label options",
        "description": "Restores the white label options."
      }
    },
    "/api/2.0/settings/companywhitelabel": {
      "get": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Get the licensor data",
        "responses": {
          "200": {
            "description": "List of company white label settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the licensor data",
        "description": "Returns the licensor data."
      }
    },
    "/api/2.0/settings/rebranding/company": {
      "post": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Save the company white label settings",
        "requestBody": {
          "description": "Company white label settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettingsWrapper"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettingsWrapper"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettingsWrapper"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Boolean value: true if the operation is successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the company white label settings",
        "description": "Saves the company white label settings specified in the request."
      },
      "get": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Get the company white label settings",
        "responses": {
          "200": {
            "description": "Company white label settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CompanyWhiteLabelSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CompanyWhiteLabelSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.CompanyWhiteLabelSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the company white label settings",
        "description": "Returns the company white label settings."
      },
      "delete": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Delete the company white label settings",
        "responses": {
          "200": {
            "description": "Default company white label settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Delete the company white label settings",
        "description": "Deletes the company white label settings."
      }
    },
    "/api/2.0/settings/rebranding/additional": {
      "post": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Save the additional white label settings",
        "requestBody": {
          "description": "Additional white label settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.AdditionalWhiteLabelSettingsWrapper"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.AdditionalWhiteLabelSettingsWrapper"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.AdditionalWhiteLabelSettingsWrapper"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Boolean value: true if the operation is successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the additional white label settings",
        "description": "Saves the additional white label settings specified in the request."
      },
      "get": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Get the additional white label settings",
        "responses": {
          "200": {
            "description": "Additional white label settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.AdditionalWhiteLabelSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.AdditionalWhiteLabelSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.AdditionalWhiteLabelSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the additional white label settings",
        "description": "Returns the additional white label settings."
      },
      "delete": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Delete the additional white label settings",
        "responses": {
          "200": {
            "description": "Default additional white label settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.AdditionalWhiteLabelSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.AdditionalWhiteLabelSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.AdditionalWhiteLabelSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Delete the additional white label settings",
        "description": "Deletes the additional white label settings."
      }
    },
    "/api/2.0/settings/enableWhitelabel": {
      "get": {
        "tags": [
          "Settings / Rebranding"
        ],
        "summary": "Check the white label availability",
        "responses": {
          "200": {
            "description": "Boolean value: true if the white label is enabled",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Check the white label availability",
        "description": "Checks if the white label is enabled or not."
      }
    },
    "/api/2.0/settings/security": {
      "get": {
        "tags": [
          "Settings / Security"
        ],
        "summary": "Get the security settings",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "List of module IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Security settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SecurityDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SecurityDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SecurityDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the security settings",
        "description": "Returns the security settings for the modules specified in the request."
      },
      "put": {
        "tags": [
          "Settings / Security"
        ],
        "summary": "Set the module security settings",
        "requestBody": {
          "description": "Module request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WebItemSecurityRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WebItemSecurityRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WebItemSecurityRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Security settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SecurityDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SecurityDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SecurityDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Set the module security settings",
        "description": "Sets the security settings to the module with the ID specified in the request."
      }
    },
    "/api/2.0/settings/security/{id}": {
      "get": {
        "tags": [
          "Settings / Security"
        ],
        "summary": "Get the module availability",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Module ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "9924256A-739C-462b-AF15-E652A3B1B6EB"
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean value: true - module is enabled, false - module is disabled",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the module availability",
        "description": "Returns the availability of the module with the ID specified in the request."
      }
    },
    "/api/2.0/settings/security/modules": {
      "get": {
        "tags": [
          "Settings / Security"
        ],
        "summary": "Get the enabled modules",
        "responses": {
          "200": {
            "description": "List of enabled modules",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the enabled modules",
        "description": "Returns a list of all the enabled modules."
      }
    },
    "/api/2.0/settings/security/password": {
      "get": {
        "tags": [
          "Settings / Security"
        ],
        "summary": "Get the password settings",
        "responses": {
          "200": {
            "description": "Password settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.PasswordSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.PasswordSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.PasswordSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the password settings",
        "description": "Returns the portal password settings."
      },
      "put": {
        "tags": [
          "Settings / Security"
        ],
        "summary": "Set the password settings",
        "requestBody": {
          "description": "Password settings",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.Models.PasswordSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.Models.PasswordSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.Models.PasswordSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.PasswordSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.PasswordSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.PasswordSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Set the password settings",
        "description": "Sets the portal password settings."
      }
    },
    "/api/2.0/settings/security/access": {
      "put": {
        "tags": [
          "Settings / Security"
        ],
        "summary": "Set the access settings to products",
        "requestBody": {
          "description": "Module request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WebItemsSecurityRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WebItemsSecurityRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WebItemsSecurityRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Security settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SecurityDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SecurityDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.SecurityDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Set the access settings to products",
        "description": "Sets the access settings to the products with the IDs specified in the request."
      }
    },
    "/api/2.0/settings/security/administrator/{productid}": {
      "get": {
        "tags": [
          "Settings / Security"
        ],
        "summary": "Get the product administrators",
        "parameters": [
          {
            "name": "productid",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "9924256A-739C-462b-AF15-E652A3B1B6EB"
          }
        ],
        "responses": {
          "200": {
            "description": "List of product administrators with the following parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the product administrators",
        "description": "Returns a list of all the product administrators with the ID specified in the request."
      }
    },
    "/api/2.0/settings/security/administrator": {
      "get": {
        "tags": [
          "Settings / Security"
        ],
        "summary": "Check a product administrator",
        "parameters": [
          {
            "name": "productid",
            "in": "query",
            "description": "Product ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "9924256A-739C-462b-AF15-E652A3B1B6EB"
          },
          {
            "name": "userid",
            "in": "query",
            "description": "User ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "9924256A-739C-462b-AF15-E652A3B1B6EB"
          }
        ],
        "responses": {
          "200": {
            "description": "Object with the user security information: product ID, user ID, administrator or not",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Check a product administrator",
        "description": "Checks if the selected user is a product administrator with the ID specified in the request."
      },
      "put": {
        "tags": [
          "Settings / Security"
        ],
        "summary": "Set a product administrator",
        "requestBody": {
          "description": "Security request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SecurityRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SecurityRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SecurityRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Object with the user security information: product ID, user ID, administrator or not",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Set a product administrator",
        "description": "Sets the selected user as a product administrator with the ID specified in the request."
      }
    },
    "/api/2.0/settings/ssov2": {
      "get": {
        "tags": [
          "Settings / SSO"
        ],
        "summary": "Get the SSO settings",
        "responses": {
          "200": {
            "description": "SSO settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              }
            }
          }
        },
        "x-shortName": "Get the SSO settings",
        "description": "Returns the current portal SSO settings."
      },
      "post": {
        "tags": [
          "Settings / SSO"
        ],
        "summary": "Save the SSO settings",
        "requestBody": {
          "description": "SSO settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SsoSettingsRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SsoSettingsRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SsoSettingsRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SSO settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the SSO settings",
        "description": "Saves the SSO settings for the current portal."
      },
      "delete": {
        "tags": [
          "Settings / SSO"
        ],
        "summary": "Reset the SSO settings",
        "responses": {
          "200": {
            "description": "Default SSO settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Reset the SSO settings",
        "description": "Resets the SSO settings of the current portal."
      }
    },
    "/api/2.0/settings/ssov2/default": {
      "get": {
        "tags": [
          "Settings / SSO"
        ],
        "summary": "Get the default SSO settings",
        "responses": {
          "200": {
            "description": "Default SSO settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the default SSO settings",
        "description": "Returns the default portal SSO settings."
      }
    },
    "/api/2.0/settings/ssov2/constants": {
      "get": {
        "tags": [
          "Settings / SSO"
        ],
        "summary": "Get the SSO settings constants",
        "responses": {
          "200": {
            "description": "The SSO settings constants: SSO name ID format type, SSO binding type, SSO signing algorithm type, SSO SP certificate action type, SSO IDP certificate action type",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the SSO settings constants",
        "description": "Returns the SSO settings constants."
      }
    },
    "/api/2.0/settings/statistics/spaceusage/{id}": {
      "get": {
        "tags": [
          "Settings / Statistics"
        ],
        "summary": "Get the space usage statistics",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Module ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "9924256A-739C-462b-AF15-E652A3B1B6EB"
          }
        ],
        "responses": {
          "200": {
            "description": "Module space usage statistics",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.UsageSpaceStatItemDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.UsageSpaceStatItemDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.UsageSpaceStatItemDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the space usage statistics",
        "description": "Returns the space usage statistics of the module with the ID specified in the request."
      }
    },
    "/api/2.0/settings/statistics/visit": {
      "get": {
        "tags": [
          "Settings / Statistics"
        ],
        "summary": "Get the visit statistics",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "Start period date",
            "schema": {
              "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "End period date",
            "schema": {
              "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of point charts",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.ChartPointDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.ChartPointDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.ChartPointDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the visit statistics",
        "description": "Returns the user visit statistics for the period specified in the request."
      }
    },
    "/api/2.0/settings/storage": {
      "get": {
        "tags": [
          "Settings / Storage"
        ],
        "summary": "Get storages",
        "responses": {
          "200": {
            "description": "List of storages with the following parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.StorageDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.StorageDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.StorageDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get storages",
        "description": "Returns a list of all the portal storages."
      },
      "put": {
        "tags": [
          "Settings / Storage"
        ],
        "summary": "Update a storage",
        "requestBody": {
          "description": "Storage settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.StorageRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.StorageRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.StorageRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated storage settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Data.Storage.Configuration.StorageSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Data.Storage.Configuration.StorageSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Data.Storage.Configuration.StorageSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update a storage",
        "description": "Updates a storage with the parameters specified in the request."
      },
      "delete": {
        "tags": [
          "Settings / Storage"
        ],
        "summary": "Reset the storage settings",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Reset the storage settings",
        "description": "Resets the storage settings to the default parameters."
      }
    },
    "/api/2.0/settings/storage/progress": {
      "get": {
        "tags": [
          "Settings / Storage"
        ],
        "summary": "Get the storage progress",
        "responses": {
          "200": {
            "description": "Storage progress",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              "application/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              },
              "text/json": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the storage progress",
        "description": "Returns the storage progress."
      }
    },
    "/api/2.0/settings/storage/cdn": {
      "get": {
        "tags": [
          "Settings / Storage"
        ],
        "summary": "Get the CDN storages",
        "responses": {
          "200": {
            "description": "List of the CDN storages with the following parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.StorageDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.StorageDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.StorageDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the CDN storages",
        "description": "Returns a list of all the CDN storages."
      },
      "put": {
        "tags": [
          "Settings / Storage"
        ],
        "summary": "Update the CDN storage",
        "requestBody": {
          "description": "CDN storage settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.StorageRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.StorageRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.StorageRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated CDN storage",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Data.Storage.Configuration.CdnStorageSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Data.Storage.Configuration.CdnStorageSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Data.Storage.Configuration.CdnStorageSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update the CDN storage",
        "description": "Updates the CDN storage with the parameters specified in the request."
      },
      "delete": {
        "tags": [
          "Settings / Storage"
        ],
        "summary": "Reset the CDN storage settings",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Reset the CDN storage settings",
        "description": "Resets the CDN storage settings to the default parameters."
      }
    },
    "/api/2.0/settings/storage/backup": {
      "get": {
        "tags": [
          "Settings / Storage"
        ],
        "summary": "Get the backup storages",
        "responses": {
          "200": {
            "description": "List of the backup storages with the following parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.StorageDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.StorageDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.StorageDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the backup storages",
        "description": "Returns a list of all the backup storages."
      }
    },
    "/api/2.0/settings/storage/s3/regions": {
      "get": {
        "tags": [
          "Settings / Storage"
        ],
        "summary": "Get Amazon regions",
        "responses": {
          "200": {
            "description": "List of the Amazon regions",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get Amazon regions",
        "description": "Returns a list of all Amazon regions."
      }
    },
    "/api/2.0/settings/customschemas": {
      "get": {
        "tags": [
          "Settings / Team templates"
        ],
        "summary": "Get team templates",
        "responses": {
          "200": {
            "description": "List of team templates with the following parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get team templates",
        "description": "Returns all portal team templates that allow users to name their organization (or group), add members, and define their activities within the portal."
      },
      "post": {
        "tags": [
          "Settings / Team templates"
        ],
        "summary": "Save the naming settings",
        "requestBody": {
          "description": "Team template parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaBaseRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaBaseRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaBaseRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Team template with the following parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Save the naming settings",
        "description": "Saves the names from the team template with the ID specified in the request."
      },
      "put": {
        "tags": [
          "Settings / Team templates"
        ],
        "summary": "Create a custom team template",
        "requestBody": {
          "description": "Team template parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom team template with the following parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Create a custom team template",
        "description": "Creates a custom team template with the parameters specified in the request."
      }
    },
    "/api/2.0/settings/customschemas/{id}": {
      "get": {
        "tags": [
          "Settings / Team templates"
        ],
        "summary": "Get a team template by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Team template ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "some text"
          }
        ],
        "responses": {
          "200": {
            "description": "Team template with the following parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get a team template by ID",
        "description": "Returns a team template by the ID specified in the request."
      }
    },
    "/api/2.0/settings/tfaapp": {
      "get": {
        "tags": [
          "Settings / TFA settings"
        ],
        "summary": "Get the TFA settings",
        "responses": {
          "200": {
            "description": "TFA settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaSettingsDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaSettingsDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaSettingsDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the TFA settings",
        "description": "Returns the current two-factor authentication settings."
      },
      "put": {
        "tags": [
          "Settings / TFA settings"
        ],
        "summary": "Update the TFA settings",
        "requestBody": {
          "description": "TFA settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if the operation is successful",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update the TFA settings",
        "description": "Updates the two-factor authentication settings with the parameters specified in the request."
      }
    },
    "/api/2.0/settings/tfaapp/validate": {
      "post": {
        "tags": [
          "Settings / TFA settings"
        ],
        "summary": "Validate the TFA code",
        "requestBody": {
          "description": "TFA validation request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaValidateRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaValidateRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaValidateRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "True if the code is valid",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Validate the TFA code",
        "description": "Validates the two-factor authentication code specified in the request."
      }
    },
    "/api/2.0/settings/tfaapp/confirm": {
      "get": {
        "tags": [
          "Settings / TFA settings"
        ],
        "summary": "Get confirmation email",
        "responses": {
          "200": {
            "description": "Confirmation email URL",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get confirmation email",
        "description": "Returns the confirmation email URL for authorization via SMS or TFA application."
      }
    },
    "/api/2.0/settings/tfaappwithlink": {
      "put": {
        "tags": [
          "Settings / TFA settings"
        ],
        "summary": "Get confirmation email for updating TFA settings",
        "requestBody": {
          "description": "TFA settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Confirmation email URL",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get confirmation email for updating TFA settings",
        "description": "Returns the confirmation email URL for updating TFA settings."
      }
    },
    "/api/2.0/settings/tfaapp/setup": {
      "get": {
        "tags": [
          "Settings / TFA settings"
        ],
        "summary": "Generate setup code",
        "responses": {
          "200": {
            "description": "Setup code",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Authenticator.SetupCode"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Authenticator.SetupCode"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Google.Authenticator.SetupCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Generate setup code",
        "description": "Generates the setup TFA code for the current user."
      }
    },
    "/api/2.0/settings/tfaappcodes": {
      "get": {
        "tags": [
          "Settings / TFA settings"
        ],
        "summary": "Get the TFA codes",
        "responses": {
          "200": {
            "description": "List of TFA application codes",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get the TFA codes",
        "description": "Returns the two-factor authentication application codes."
      }
    },
    "/api/2.0/settings/tfaappnewcodes": {
      "put": {
        "tags": [
          "Settings / TFA settings"
        ],
        "summary": "Update the TFA codes",
        "responses": {
          "200": {
            "description": "New backup codes",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update the TFA codes",
        "description": "Requests the new backup codes for the two-factor authentication application."
      }
    },
    "/api/2.0/settings/tfaappnewapp": {
      "put": {
        "tags": [
          "Settings / TFA settings"
        ],
        "summary": "Unlink the TFA application",
        "requestBody": {
          "description": "TFA settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TfaRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login URL",
            "content": {
              "text/plain": {
                "schema": {}
              },
              "application/json": {
                "schema": {}
              },
              "text/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Unlink the TFA application",
        "description": "Unlinks the current two-factor authentication application from the user account specified in the request."
      }
    },
    "/api/2.0/settings/tips": {
      "put": {
        "tags": [
          "Settings / Tips"
        ],
        "summary": "Update the tip settings",
        "requestBody": {
          "description": "Settings request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TipsRequestDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TipsRequestDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.TipsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated tip settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.TipsSettings"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.TipsSettings"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Studio.Core.TipsSettings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update the tip settings",
        "description": "Updates the tip settings with a parameter specified in the request."
      }
    },
    "/api/2.0/settings/tips/change/subscription": {
      "put": {
        "tags": [
          "Settings / Tips"
        ],
        "summary": "Update the tip subscription",
        "responses": {
          "200": {
            "description": "Boolean value: true if the user is subscribed to the tips",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update the tip subscription",
        "description": "Updates the tip subscription."
      }
    },
    "/api/2.0/settings/tips/subscription": {
      "get": {
        "tags": [
          "Settings / Tips"
        ],
        "summary": "Check the tip subscription",
        "responses": {
          "200": {
            "description": "Boolean value: true if the user is subscribed to the tips",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "text/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Check the tip subscription",
        "description": "Checks if the current user is subscribed to the tips or not."
      }
    },
    "/api/2.0/settings/webhook": {
      "get": {
        "tags": [
          "Settings / Webhooks"
        ],
        "summary": "Get webhooks",
        "responses": {
          "200": {
            "description": "List of tenant webhooks with their config parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigWithStatusDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigWithStatusDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigWithStatusDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get webhooks",
        "description": "Returns a list of the tenant webhooks."
      },
      "post": {
        "tags": [
          "Settings / Webhooks"
        ],
        "summary": "Create a webhook",
        "requestBody": {
          "description": "Webhook request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.WebhooksConfigRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.WebhooksConfigRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.WebhooksConfigRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tenant webhook with its config parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Create a webhook",
        "description": "Creates a new tenant webhook with the parameters specified in the request."
      },
      "put": {
        "tags": [
          "Settings / Webhooks"
        ],
        "summary": "Update a webhook",
        "requestBody": {
          "description": "New webhook request parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.WebhooksConfigRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.WebhooksConfigRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.WebhooksConfigRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated tenant webhook with its config parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Update a webhook",
        "description": "Updates the tenant webhook with the parameters specified in the request."
      }
    },
    "/api/2.0/settings/webhook/{id}": {
      "delete": {
        "tags": [
          "Settings / Webhooks"
        ],
        "summary": "Remove a webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1234
          }
        ],
        "responses": {
          "200": {
            "description": "Tenant webhook with its config parameters",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Remove a webhook",
        "description": "Removes the tenant webhook with the ID specified in the request."
      },
      "put": {
        "tags": [
          "Settings / Webhooks"
        ],
        "summary": "Disable a webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1234
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Webhooks.Core.Webhook"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Webhooks.Core.Webhook"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Webhooks.Core.Webhook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Disable a webhook",
        "description": "Disables a webhook with the ID specified in the request."
      }
    },
    "/api/2.0/settings/webhooks/log": {
      "get": {
        "tags": [
          "Settings / Webhooks"
        ],
        "summary": "Get webhook logs",
        "parameters": [
          {
            "name": "deliveryFrom",
            "in": "query",
            "description": "Delivey start time",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2008-04-10T06-30-00.000Z"
          },
          {
            "name": "deliveryTo",
            "in": "query",
            "description": "Delivey end time",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2008-04-10T06-30-00.000Z"
          },
          {
            "name": "hookUri",
            "in": "query",
            "description": "Hook URI",
            "schema": {
              "type": "string"
            },
            "example": "some text"
          },
          {
            "name": "webhookId",
            "in": "query",
            "description": "Webhook ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1234
          },
          {
            "name": "configId",
            "in": "query",
            "description": "Config ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1234
          },
          {
            "name": "eventId",
            "in": "query",
            "description": "Event ID",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1234
          },
          {
            "name": "groupStatus",
            "in": "query",
            "description": "Webhook group status",
            "schema": {
              "$ref": "#/components/schemas/ASC.Webhooks.Core.WebhookGroupStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs of the webhook activities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksLogDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksLogDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksLogDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get webhook logs",
        "description": "Returns the logs of the webhook activities."
      }
    },
    "/api/2.0/settings/webhook/{id}/retry": {
      "put": {
        "tags": [
          "Settings / Webhooks"
        ],
        "summary": "Retry a webhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1234
          }
        ],
        "responses": {
          "200": {
            "description": "Logs of the webhook activities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksLogDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksLogDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksLogDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Retry a webhook",
        "description": "Retries a webhook with the ID specified in the request."
      }
    },
    "/api/2.0/settings/webhook/retry": {
      "put": {
        "tags": [
          "Settings / Webhooks"
        ],
        "summary": "Retry webhooks",
        "requestBody": {
          "description": "Request parameters to retry webhooks",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.WebhookRetryRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.WebhookRetryRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.RequestsDto.WebhookRetryRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logs of the webhook activities",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksLogDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksLogDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksLogDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Retry webhooks",
        "description": "Retries all the webhooks with the IDs specified in the request."
      }
    },
    "/api/2.0/settings/webhooks": {
      "get": {
        "tags": [
          "Settings / Webhooks"
        ],
        "summary": "Get webhook settings",
        "responses": {
          "200": {
            "description": "List of webhook settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Webhooks.Core.Webhook"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Webhooks.Core.Webhook"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Webhooks.Core.Webhook"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ],
        "x-shortName": "Get webhook settings",
        "description": "Returns settings of all webhooks."
      }
    },
    "/api/2.0/settings/webplugins": {
      "post": {
        "tags": [
          "Settings / Webplugins"
        ],
        "summary": "",
        "parameters": [
          {
            "name": "system",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Web plugin",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebPluginDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebPluginDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebPluginDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Settings / Webplugins"
        ],
        "summary": "",
        "parameters": [
          {
            "name": "enabled",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Web plugin",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebPluginDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebPluginDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebPluginDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/api/2.0/settings/webplugins/{name}": {
      "get": {
        "tags": [
          "Settings / Webplugins"
        ],
        "summary": "",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "some text"
          }
        ],
        "responses": {
          "200": {
            "description": "Web plugin",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebPluginDto"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebPluginDto"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebPluginDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Settings / Webplugins"
        ],
        "summary": "",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "some text"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WebPluginRequestsDto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WebPluginRequestsDto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.WebPluginRequestsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Settings / Webplugins"
        ],
        "summary": "",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "some text"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "asc_auth_key": [
              "read",
              "write"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ASC.Api.Collections.ItemKeyValuePair<System.String, ASC.Web.Api.ApiModel.RequestsDto.LogoRequestsDto>": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.LogoRequestsDto"
          }
        },
        "additionalProperties": false
      },
      "ASC.Api.Collections.ItemKeyValuePair<System.String, System.Boolean>": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ASC.Api.Collections.ItemKeyValuePair<System.String, System.String>": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Api.Core.ApiDateTime": {
        "type": "object",
        "properties": {
          "utcTime": {
            "type": "string",
            "description": "UtcTime",
            "format": "date-time",
            "readOnly": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "timeZoneOffset": {
            "type": "string",
            "description": "TimeZoneOffset",
            "format": "date-span",
            "readOnly": true,
            "example": "00:00:00"
          }
        },
        "additionalProperties": false
      },
      "ASC.Api.Core.Module": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "appName": {
            "type": "string",
            "description": "Product class name",
            "nullable": true,
            "example": "some text"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "some text"
          },
          "link": {
            "type": "string",
            "description": "Start link",
            "nullable": true,
            "example": "some text"
          },
          "iconUrl": {
            "type": "string",
            "description": "Icon URL",
            "nullable": true,
            "example": "some text"
          },
          "imageUrl": {
            "type": "string",
            "description": "Large image URL",
            "nullable": true,
            "example": "some text"
          },
          "helpUrl": {
            "type": "string",
            "description": "Help URL",
            "nullable": true,
            "example": "some text"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true,
            "example": "some text"
          },
          "isPrimary": {
            "type": "boolean",
            "description": "Specifies if the module is primary or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Api.Settings.Smtp.SmtpOperationStatusRequestsDto": {
        "type": "object",
        "properties": {
          "completed": {
            "type": "boolean",
            "description": "Specifies if the SMTP operation is completed or not",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "SMTP operation ID",
            "nullable": true,
            "example": "some text"
          },
          "error": {
            "type": "string",
            "description": "SMTP operation error",
            "nullable": true,
            "example": "some text"
          },
          "status": {
            "type": "string",
            "description": "SMTP operation status",
            "nullable": true,
            "example": "some text"
          },
          "percents": {
            "type": "integer",
            "description": "Percentage of SMTP operation completion",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.AuditTrail.Types.ActionType": {
        "enum": [
          "None",
          "Create",
          "Update",
          "Delete",
          "Link",
          "Unlink",
          "Attach",
          "Detach",
          "Send",
          "Import",
          "Export",
          "UpdateAccess",
          "Download",
          "Upload",
          "Copy",
          "Move",
          "Reassigns",
          "Follow",
          "Unfollow",
          "Logout"
        ],
        "type": "integer",
        "description": "[0 - None, 1 - Create, 2 - Update, 3 - Delete, 4 - Link, 5 - Unlink, 6 - Attach, 7 - Detach, 8 - Send, 9 - Import, 10 - Export, 11 - Update access, 12 - Download, 13 - Upload, 14 - Copy, 15 - Move, 16 - Reassigns, 17 - Follow, 18 - Unfollow, 19 - Logout]",
        "format": "int32"
      },
      "ASC.AuditTrail.Types.EntryType": {
        "enum": [
          "None",
          "File",
          "Folder",
          "User",
          "Group",
          "Room",
          "Tag"
        ],
        "type": "integer",
        "description": "[0 - None, 1 - File, 2 - Folder, 23 - User, 24 - Group, 25 - Room, 26 - Tag]",
        "format": "int32"
      },
      "ASC.AuditTrail.Types.ModuleType": {
        "enum": [
          "None",
          "Files",
          "Folders",
          "DocumentsSettings",
          "Companies",
          "Persons",
          "Contacts",
          "CrmTasks",
          "Opportunities",
          "Invoices",
          "Cases",
          "CommonCrmSettings",
          "ContactsSettings",
          "ContactTypes",
          "InvoiceSettings",
          "OtherCrmSettings",
          "Users",
          "Groups",
          "Projects",
          "Milestones",
          "Tasks",
          "Discussions",
          "TimeTracking",
          "Reports",
          "ProjectsSettings",
          "General",
          "Products",
          "Rooms"
        ],
        "type": "integer",
        "description": "[0 - None, 1 - Files, 2 - Folders, 3 - Documents settings, 4 - Companies, 5 - Persons, 6 - Contacts, 7 - Crm tasks, 8 - Opportunities, 9 - Invoices, 10 - Cases, 11 - Common crm settings, 12 - Contacts settings, 13 - Contact types, 14 - Invoice settings, 15 - Other crm settings, 16 - Users, 17 - Groups, 18 - Projects, 19 - Milestones, 20 - Tasks, 21 - Discussions, 22 - Time tracking, 23 - Reports, 24 - Projects settings, 25 - General, 26 - Products, 27 - Rooms]",
        "format": "int32"
      },
      "ASC.AuditTrail.Types.ProductType": {
        "enum": [
          "None",
          "Documents",
          "Login",
          "Others",
          "People",
          "Settings"
        ],
        "type": "integer",
        "description": "[0 - None, 2 - Documents, 3 - Login, 4 - Others, 5 - People, 7 - Settings]",
        "format": "int32"
      },
      "ASC.Core.Billing.Quota": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32",
            "example": 1234
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Billing.Tariff": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32",
            "example": 1234
          },
          "state": {
            "$ref": "#/components/schemas/ASC.Core.Billing.TariffState"
          },
          "dueDate": {
            "type": "string",
            "description": "Due date",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "delayDueDate": {
            "type": "string",
            "description": "Delay due date",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "licenseDate": {
            "type": "string",
            "description": "License date",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "customerId": {
            "type": "string",
            "description": "Customer ID",
            "nullable": true,
            "example": "some text"
          },
          "quotas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Core.Billing.Quota"
            },
            "description": "List of quotas",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Billing.TariffState": {
        "enum": [
          "Trial",
          "Paid",
          "Delay",
          "NotPaid"
        ],
        "type": "integer",
        "description": "[0 - Trial, 1 - Paid, 2 - Delay, 3 - Not paid]",
        "format": "int32"
      },
      "ASC.Core.Common.EF.FireBaseUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32",
            "example": 1234
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "tenantId": {
            "type": "integer",
            "description": "Tenant ID",
            "format": "int32",
            "example": 1234
          },
          "firebaseDeviceToken": {
            "type": "string",
            "description": "Firebase device token",
            "nullable": true,
            "example": "some text"
          },
          "application": {
            "type": "string",
            "description": "Application",
            "nullable": true,
            "example": "some text"
          },
          "isSubscribed": {
            "type": "boolean",
            "description": "Specifies if the user is subscribed to the push notifications or not",
            "nullable": true,
            "example": true
          },
          "tenant": {
            "$ref": "#/components/schemas/ASC.Core.Common.EF.Model.DbTenant"
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Common.EF.Model.DbTenant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32",
            "example": 1234
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "some text"
          },
          "alias": {
            "type": "string",
            "description": "Alias",
            "nullable": true,
            "example": "some text"
          },
          "mappedDomain": {
            "type": "string",
            "description": "Mapped domain",
            "nullable": true,
            "example": "some text"
          },
          "version": {
            "type": "integer",
            "description": "Version",
            "format": "int32",
            "example": 1234
          },
          "version_Changed": {
            "type": "string",
            "description": "Version_changed",
            "format": "date-time",
            "nullable": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "versionChanged": {
            "type": "string",
            "description": "Version changed",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "language": {
            "type": "string",
            "description": "Language",
            "nullable": true,
            "example": "some text"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone",
            "nullable": true,
            "example": "some text"
          },
          "trustedDomainsRaw": {
            "type": "string",
            "description": "Trusted domains raw",
            "nullable": true,
            "example": "some text"
          },
          "trustedDomainsEnabled": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantTrustedDomainsType"
          },
          "status": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantStatus"
          },
          "statusChanged": {
            "type": "string",
            "description": "Status changed",
            "format": "date-time",
            "nullable": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "statusChangedHack": {
            "type": "string",
            "description": "Status changed hack",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "creationDateTime": {
            "type": "string",
            "description": "Creation date time",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "ownerId": {
            "type": "string",
            "description": "Owner id",
            "format": "uuid",
            "nullable": true,
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "paymentId": {
            "type": "string",
            "description": "Payment id",
            "nullable": true,
            "example": "some text"
          },
          "industry": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantIndustry"
          },
          "lastModified": {
            "type": "string",
            "description": "Last modified",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "spam": {
            "type": "boolean",
            "description": "Spam",
            "example": true
          },
          "calls": {
            "type": "boolean",
            "description": "Calls",
            "example": true
          },
          "partner": {
            "$ref": "#/components/schemas/ASC.Core.Common.EF.Model.DbTenantPartner"
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Common.EF.Model.DbTenantPartner": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "description": "Tenant id",
            "format": "int32",
            "example": 1234
          },
          "partnerId": {
            "type": "string",
            "description": "Partner id",
            "nullable": true,
            "example": "some text"
          },
          "affiliateId": {
            "type": "string",
            "description": "Affiliate id",
            "nullable": true,
            "example": "some text"
          },
          "campaign": {
            "type": "string",
            "description": "Campaign",
            "nullable": true,
            "example": "some text"
          },
          "tenant": {
            "$ref": "#/components/schemas/ASC.Core.Common.EF.Model.DbTenant"
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Tenants.TenantAuditSettings": {
        "type": "object",
        "properties": {
          "loginHistoryLifeTime": {
            "type": "integer",
            "description": "Login history lifetime",
            "format": "int32",
            "example": 1234
          },
          "auditTrailLifeTime": {
            "type": "integer",
            "description": "Audit trail lifetime",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Tenants.TenantAuditSettingsWrapper": {
        "type": "object",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantAuditSettings"
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Tenants.TenantDomainValidator": {
        "type": "object",
        "properties": {
          "regex": {
            "type": "string",
            "description": "Regex",
            "nullable": true,
            "readOnly": true,
            "example": "some text"
          },
          "minLength": {
            "type": "integer",
            "description": "Min length",
            "format": "int32",
            "readOnly": true,
            "example": 1234
          },
          "maxLength": {
            "type": "integer",
            "description": "Max length",
            "format": "int32",
            "readOnly": true,
            "example": 63
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Tenants.TenantIndustry": {
        "enum": [
          "Other",
          "Accounting",
          "AdvertisingMarketingPR",
          "Banking",
          "Consulting",
          "Design",
          "Education",
          "Environment",
          "FinancialServices",
          "HealthCare",
          "IT",
          "Legal",
          "Manufacturing",
          "PublicSector",
          "Publishing",
          "RetailSales",
          "Telecommunications"
        ],
        "type": "integer",
        "description": "[0 - Other, 1 - Accounting, 2 - Advertising marketing PR, 3 - Banking, 4 - Consulting, 5 - Design, 6 - Education, 7 - Environment, 8 - Financial services, 9 - Health care, 10 - IT, 11 - Legal, 12 - Manufacturing, 13 - Public sector, 14 - Publishing, 15 - Retail sales, 16 - Telecommunications]",
        "format": "int32"
      },
      "ASC.Core.Tenants.TenantQuota": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "description": "Tenant ID",
            "format": "int32",
            "example": 1234
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "Default"
          },
          "price": {
            "type": "number",
            "description": "Price",
            "format": "double",
            "example": "10.0"
          },
          "priceCurrencySymbol": {
            "type": "string",
            "description": "Price currency symbol",
            "nullable": true,
            "example": "some text"
          },
          "productId": {
            "type": "string",
            "description": "Product ID",
            "nullable": true,
            "example": "some text"
          },
          "visible": {
            "type": "boolean",
            "description": "Specifies if the tenant quota is visible or not",
            "example": true
          },
          "features": {
            "type": "string",
            "description": "Tenant quota features",
            "nullable": true,
            "example": "some text"
          },
          "maxFileSize": {
            "type": "integer",
            "description": "Maximum file size",
            "format": "int64",
            "example": 26214400
          },
          "maxTotalSize": {
            "type": "integer",
            "description": "Maximum total size",
            "format": "int64",
            "example": 9223372036854776000
          },
          "countUser": {
            "type": "integer",
            "description": "Number of portal users",
            "format": "int32",
            "example": 1234
          },
          "countRoomAdmin": {
            "type": "integer",
            "description": "Number of portal room administrators",
            "format": "int32",
            "example": 1234
          },
          "usersInRoom": {
            "type": "integer",
            "description": "Number of room users",
            "format": "int32",
            "example": 1234
          },
          "countRoom": {
            "type": "integer",
            "description": "Number of rooms",
            "format": "int32",
            "example": 1234
          },
          "nonProfit": {
            "type": "boolean",
            "description": "Specifies if the tenant quota is nonprofit or not",
            "example": true
          },
          "trial": {
            "type": "boolean",
            "description": "Specifies if the tenant quota is trial or not",
            "example": true
          },
          "free": {
            "type": "boolean",
            "description": "Specifies if the tenant quota is free or not",
            "example": true
          },
          "update": {
            "type": "boolean",
            "description": "Specifies if the tenant quota is updated or not",
            "example": true
          },
          "audit": {
            "type": "boolean",
            "description": "Specifies if the audit trail is available or not",
            "example": true
          },
          "docsEdition": {
            "type": "boolean",
            "description": "Specifies if this tenant quota is Docs edition or not",
            "example": true
          },
          "ldap": {
            "type": "boolean",
            "description": "Specifies if the LDAP settings are available or not",
            "example": true
          },
          "sso": {
            "type": "boolean",
            "description": "Specifies if the SSO settings are available or not",
            "example": true
          },
          "statistic": {
            "type": "boolean",
            "description": "Specifies if the statistic settings are available or not",
            "example": true
          },
          "whiteLabel": {
            "type": "boolean",
            "description": "Specifies if the white label settings are available or not",
            "example": true
          },
          "customization": {
            "type": "boolean",
            "description": "Specifies if the customization settings are available or not",
            "example": true
          },
          "custom": {
            "type": "boolean",
            "description": "Specifies if the custom domain URL is available or not",
            "example": true
          },
          "autoBackupRestore": {
            "type": "boolean",
            "description": "Specifies if the automatic Backup&amp;Restore feature is available or not",
            "example": true
          },
          "oauth": {
            "type": "boolean",
            "description": "Specifies if Oauth is available or not",
            "example": true
          },
          "contentSearch": {
            "type": "boolean",
            "description": "Specifies if the content search is available or not",
            "example": true
          },
          "thirdParty": {
            "type": "boolean",
            "description": "Specifies if the third-party accounts linking is available or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Tenants.TenantQuotaSettings": {
        "type": "object",
        "properties": {
          "enableQuota": {
            "type": "boolean",
            "description": "Specifies if the quota is enabled or not",
            "example": true
          },
          "quota": {
            "type": "integer",
            "description": "Quota",
            "format": "int64",
            "example": 1234
          },
          "lastRecalculateDate": {
            "type": "string",
            "description": "Date of the last quota recalculation",
            "format": "date-time",
            "nullable": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Tenants.TenantRoomQuotaSettings": {
        "type": "object",
        "properties": {
          "enableQuota": {
            "type": "boolean",
            "description": "Specifies if the quota is enabled or not",
            "example": true
          },
          "defaultQuota": {
            "type": "integer",
            "description": "Default quota",
            "format": "int64",
            "example": 1234
          },
          "lastRecalculateDate": {
            "type": "string",
            "description": "Date of the last quota recalculation",
            "format": "date-time",
            "nullable": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          }
        },
        "additionalProperties": false
      },
      "ASC.Core.Tenants.TenantStatus": {
        "enum": [
          "Active",
          "Suspended",
          "RemovePending",
          "Transfering",
          "Restoring",
          "Migrating",
          "Encryption"
        ],
        "type": "integer",
        "description": "[0 - Active, 1 - Suspended, 2 - Remove pending, 3 - Transfering, 4 - Restoring, 5 - Migrating, 6 - Encryption]",
        "format": "int32"
      },
      "ASC.Core.Tenants.TenantTrustedDomainsType": {
        "enum": [
          "None",
          "Custom",
          "All"
        ],
        "type": "integer",
        "description": "[0 - None, 1 - Custom, 2 - All]",
        "format": "int32"
      },
      "ASC.Core.Users.EmployeeActivationStatus": {
        "enum": [
          "NotActivated",
          "Activated",
          "Pending",
          "AutoGenerated"
        ],
        "type": "integer",
        "description": "[0 - Not activated, 1 - Activated, 2 - Pending, 4 - Auto generated]",
        "format": "int32"
      },
      "ASC.Core.Users.EmployeeStatus": {
        "enum": [
          "Active",
          "Terminated",
          "Pending",
          "Default",
          "All"
        ],
        "type": "integer",
        "description": "[1 - Active, 2 - Terminated, 4 - Pending, 5 - Default, 7 - All]",
        "format": "int32"
      },
      "ASC.Core.Users.EmployeeType": {
        "enum": [
          "All",
          "RoomAdmin",
          "User",
          "DocSpaceAdmin",
          "Collaborator"
        ],
        "type": "string",
        "description": "[0 - All, 1 - Room admin, 2 - User, 3 - DocSpace admin, 4 - Collaborator]"
      },
      "ASC.Core.Users.MobilePhoneActivationStatus": {
        "enum": [
          "NotActivated",
          "Activated"
        ],
        "type": "integer",
        "description": "[0 - Not activated, 1 - Activated]",
        "format": "int32"
      },
      "ASC.Core.Users.UserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true,
            "example": "some text"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true,
            "example": "some text"
          },
          "userName": {
            "type": "string",
            "description": "Username",
            "nullable": true,
            "example": "some text"
          },
          "birthDate": {
            "type": "string",
            "description": "Birthday",
            "format": "date-time",
            "nullable": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "sex": {
            "type": "boolean",
            "description": "Sex (male or female)",
            "nullable": true,
            "example": true
          },
          "status": {
            "$ref": "#/components/schemas/ASC.Core.Users.EmployeeStatus"
          },
          "activationStatus": {
            "$ref": "#/components/schemas/ASC.Core.Users.EmployeeActivationStatus"
          },
          "terminatedDate": {
            "type": "string",
            "description": "The date and time when the user account was terminated",
            "format": "date-time",
            "nullable": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "some text"
          },
          "workFromDate": {
            "type": "string",
            "description": "Registration date",
            "format": "date-time",
            "nullable": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true,
            "example": "some text"
          },
          "contacts": {
            "type": "string",
            "description": "List of contacts in the string format",
            "nullable": true,
            "example": "some text"
          },
          "contactsList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of contacts",
            "nullable": true,
            "example": "some text"
          },
          "location": {
            "type": "string",
            "description": "Location",
            "nullable": true,
            "example": "some text"
          },
          "notes": {
            "type": "string",
            "description": "Notes",
            "nullable": true,
            "example": "some text"
          },
          "removed": {
            "type": "boolean",
            "description": "Specifies if the user account was removed or not",
            "example": true
          },
          "lastModified": {
            "type": "string",
            "description": "Last modified date",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "tenantId": {
            "type": "integer",
            "description": "Tenant ID",
            "format": "int32",
            "example": 1234
          },
          "isActive": {
            "type": "boolean",
            "description": "Spceifies if the user is active or not",
            "readOnly": true,
            "example": true
          },
          "cultureName": {
            "type": "string",
            "description": "Language",
            "nullable": true,
            "example": "some text"
          },
          "mobilePhone": {
            "type": "string",
            "description": "Mobile phone",
            "nullable": true,
            "example": "some text"
          },
          "mobilePhoneActivationStatus": {
            "$ref": "#/components/schemas/ASC.Core.Users.MobilePhoneActivationStatus"
          },
          "sid": {
            "type": "string",
            "description": "LDAP user identificator",
            "nullable": true,
            "example": "some text"
          },
          "ldapQouta": {
            "type": "integer",
            "description": "LDAP user quota attribute",
            "format": "int64",
            "example": 1234
          },
          "ssoNameId": {
            "type": "string",
            "description": "SSO SAML user identificator",
            "nullable": true,
            "example": "some text"
          },
          "ssoSessionId": {
            "type": "string",
            "description": "SSO SAML user session identificator",
            "nullable": true,
            "example": "some text"
          },
          "createDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "checkActivation": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Data.Storage.Configuration.CdnStorageSettings": {
        "type": "object",
        "properties": {
          "module": {
            "type": "string",
            "description": "Storage name",
            "nullable": true,
            "example": "some text"
          },
          "props": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Storage properties",
            "nullable": true
          },
          "switch": {
            "$ref": "#/components/schemas/System.Func<ASC.Core.Common.Configuration.DataStoreConsumer, ASC.Core.Common.Configuration.DataStoreConsumer>"
          }
        },
        "additionalProperties": false
      },
      "ASC.Data.Storage.Configuration.StorageSettings": {
        "type": "object",
        "properties": {
          "module": {
            "type": "string",
            "description": "Storage name",
            "nullable": true,
            "example": "some text"
          },
          "props": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Storage properties",
            "nullable": true
          },
          "switch": {
            "$ref": "#/components/schemas/System.Func<ASC.Core.Common.Configuration.DataStoreConsumer, ASC.Core.Common.Configuration.DataStoreConsumer>"
          }
        },
        "additionalProperties": false
      },
      "ASC.IPSecurity.IPRestriction": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP address",
            "nullable": true,
            "example": "some text"
          },
          "forAdmin": {
            "type": "boolean",
            "description": "Specifies if this address is for administrator users only or not",
            "example": true
          },
          "id": {
            "type": "integer",
            "description": "Restiction ID",
            "format": "int32",
            "example": 1234
          },
          "tenantId": {
            "type": "integer",
            "description": "Tenant ID",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.IPSecurity.IPRestrictionsSettings": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "Specifies if the IP restrictions are enabled or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.IPSecurity.IpRestrictionBase": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "IP address",
            "nullable": true,
            "example": "some text"
          },
          "forAdmin": {
            "type": "boolean",
            "description": "Specifies if this address is for administrator users only or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.MessagingSystem.Core.MessageAction": {
        "enum": [
          "LoginSuccess",
          "LoginSuccessViaSocialAccount",
          "LoginFailInvalidCombination",
          "LoginFailSocialAccountNotFound",
          "LoginFailDisabledProfile",
          "LoginFail",
          "Logout",
          "LoginSuccessViaSms",
          "LoginFailViaSms",
          "LoginFailIpSecurity",
          "LoginSuccessViaApi",
          "LoginSuccessViaSocialApp",
          "LoginSuccessViaApiSms",
          "LoginFailViaApi",
          "LoginFailViaApiSms",
          "LoginSuccessViaSSO",
          "SessionStarted",
          "SessionCompleted",
          "LoginFailViaSSO",
          "LoginSuccessViaApiSocialAccount",
          "LoginFailViaApiSocialAccount",
          "LoginSuccesViaTfaApp",
          "LoginFailViaTfaApp",
          "LoginFailBruteForce",
          "LoginSuccessViaApiTfa",
          "LoginFailViaApiTfa",
          "LoginFailRecaptcha",
          "UserCreated",
          "GuestCreated",
          "UserCreatedViaInvite",
          "GuestCreatedViaInvite",
          "UserActivated",
          "GuestActivated",
          "UserUpdated",
          "UserUpdatedLanguage",
          "UserAddedAvatar",
          "UserDeletedAvatar",
          "UserUpdatedAvatarThumbnails",
          "UserLinkedSocialAccount",
          "UserUnlinkedSocialAccount",
          "UserSentActivationInstructions",
          "UserSentEmailChangeInstructions",
          "UserSentPasswordChangeInstructions",
          "UserSentDeleteInstructions",
          "UserUpdatedPassword",
          "UserDeleted",
          "UsersUpdatedType",
          "UsersUpdatedStatus",
          "UsersSentActivationInstructions",
          "UsersDeleted",
          "SentInviteInstructions",
          "UserImported",
          "GuestImported",
          "GroupCreated",
          "GroupUpdated",
          "GroupDeleted",
          "UserUpdatedMobileNumber",
          "UserDataReassigns",
          "UserDataRemoving",
          "UserConnectedTfaApp",
          "UserDisconnectedTfaApp",
          "UserLogoutActiveConnections",
          "UserLogoutActiveConnection",
          "UserLogoutActiveConnectionsForUser",
          "SendJoinInvite",
          "FileCreated",
          "FileRenamed",
          "FileUpdated",
          "FileCreatedVersion",
          "FileDeletedVersion",
          "FileUpdatedRevisionComment",
          "FileLocked",
          "FileUnlocked",
          "FileUpdatedAccess",
          "FileDownloaded",
          "FileDownloadedAs",
          "FileUploaded",
          "FileImported",
          "FileCopied",
          "FileCopiedWithOverwriting",
          "FileMoved",
          "FileMovedWithOverwriting",
          "FileMovedToTrash",
          "FileDeleted",
          "FolderCreated",
          "FolderRenamed",
          "FolderUpdatedAccess",
          "FolderCopied",
          "FolderCopiedWithOverwriting",
          "FolderMoved",
          "FolderMovedWithOverwriting",
          "FolderMovedToTrash",
          "FolderDeleted",
          "ThirdPartyCreated",
          "ThirdPartyUpdated",
          "ThirdPartyDeleted",
          "DocumentsThirdPartySettingsUpdated",
          "DocumentsOverwritingSettingsUpdated",
          "DocumentsUploadingFormatsSettingsUpdated",
          "UserFileUpdated",
          "FileConverted",
          "FileSendAccessLink",
          "DocumentServiceLocationSetting",
          "AuthorizationKeysSetting",
          "FullTextSearchSetting",
          "StartTransferSetting",
          "StartBackupSetting",
          "LicenseKeyUploaded",
          "FileChangeOwner",
          "FileRestoreVersion",
          "DocumentSendToSign",
          "DocumentSignComplete",
          "UserUpdatedEmail",
          "DocumentsStoreForcesave",
          "DocumentsForcesave",
          "StartStorageEncryption",
          "PrivacyRoomEnable",
          "PrivacyRoomDisable",
          "StartStorageDecryption",
          "FileOpenedForChange",
          "FileMarkedAsFavorite",
          "FileRemovedFromFavorite",
          "FolderDownloaded",
          "FileRemovedFromList",
          "FolderRemovedFromList",
          "FileExternalLinkAccessUpdated",
          "TrashEmptied",
          "FileRevisionDownloaded",
          "FileMarkedAsRead",
          "FileReaded",
          "FolderMarkedAsRead",
          "FolderUpdatedAccessFor",
          "FileUpdatedAccessFor",
          "DocumentsExternalShareSettingsUpdated",
          "RoomCreated",
          "RoomRenamed",
          "RoomArchived",
          "RoomUnarchived",
          "RoomDeleted",
          "RoomUpdateAccessForUser",
          "TagCreated",
          "TagsDeleted",
          "AddedRoomTags",
          "DeletedRoomTags",
          "RoomLogoCreated",
          "RoomLogoDeleted",
          "RoomInvitationLinkUpdated",
          "DocumentsKeepNewFileNameSettingsUpdated",
          "RoomRemoveUser",
          "RoomCreateUser",
          "RoomInvitationLinkCreated",
          "RoomInvitationLinkDeleted",
          "RoomExternalLinkCreated",
          "RoomExternalLinkUpdated",
          "RoomExternalLinkDeleted",
          "FileExternalLinkCreated",
          "FileExternalLinkUpdated",
          "FileExternalLinkDeleted",
          "RoomGroupAdded",
          "RoomUpdateAccessForGroup",
          "RoomGroupRemove",
          "RoomExternalLinkRevoked",
          "RoomExternalLinkRenamed",
          "FileUploadedWithOverwriting",
          "RoomCopied",
          "LanguageSettingsUpdated",
          "TimeZoneSettingsUpdated",
          "DnsSettingsUpdated",
          "TrustedMailDomainSettingsUpdated",
          "PasswordStrengthSettingsUpdated",
          "TwoFactorAuthenticationSettingsUpdated",
          "AdministratorMessageSettingsUpdated",
          "DefaultStartPageSettingsUpdated",
          "ProductsListUpdated",
          "AdministratorAdded",
          "AdministratorOpenedFullAccess",
          "AdministratorDeleted",
          "UsersOpenedProductAccess",
          "GroupsOpenedProductAccess",
          "ProductAccessOpened",
          "ProductAccessRestricted",
          "ProductAddedAdministrator",
          "ProductDeletedAdministrator",
          "GreetingSettingsUpdated",
          "TeamTemplateChanged",
          "ColorThemeChanged",
          "OwnerSentChangeOwnerInstructions",
          "OwnerUpdated",
          "OwnerSentPortalDeactivationInstructions",
          "OwnerSentPortalDeleteInstructions",
          "PortalDeactivated",
          "PortalDeleted",
          "LoginHistoryReportDownloaded",
          "AuditTrailReportDownloaded",
          "SSOEnabled",
          "SSODisabled",
          "PortalAccessSettingsUpdated",
          "CookieSettingsUpdated",
          "MailServiceSettingsUpdated",
          "CustomNavigationSettingsUpdated",
          "AuditSettingsUpdated",
          "TwoFactorAuthenticationDisabled",
          "TwoFactorAuthenticationEnabledBySms",
          "TwoFactorAuthenticationEnabledByTfaApp",
          "PortalRenamed",
          "QuotaPerRoomChanged",
          "QuotaPerRoomDisabled",
          "QuotaPerUserChanged",
          "QuotaPerUserDisabled",
          "QuotaPerPortalChanged",
          "QuotaPerPortalDisabled",
          "FormSubmit",
          "FormOpenedForFilling",
          "CustomQuotaPerRoomDefault",
          "CustomQuotaPerRoomChanged",
          "CustomQuotaPerRoomDisabled",
          "CustomQuotaPerUserDefault",
          "CustomQuotaPerUserChanged",
          "CustomQuotaPerUserDisabled",
          "ContactAdminMailSent",
          "RoomInviteLinkUsed",
          "UserCreatedAndAddedToRoom",
          "GuestCreatedAndAddedToRoom",
          "ContactSalesMailSent",
          "None"
        ],
        "type": "integer",
        "description": "[1000 - Login success, 1001 - Login success via social account, 1002 - Login fail invalid combination, 1003 - Login fail social account not found, 1004 - Login fail disabled profile, 1005 - Login fail, 1006 - Logout, 1007 - Login success via sms, 1008 - Login fail via sms, 1009 - Login fail ip security, 1010 - Login success via api, 1011 - Login success via social app, 1012 - Login success via api sms, 1013 - Login fail via api, 1014 - Login fail via api sms, 1015 - Login success via SSO, 1016 - Session started, 1017 - Session completed, 1018 - Login fail via SSO, 1019 - Login success via api social account, 1020 - Login fail via api social account, 1021 - Login succes via tfa app, 1022 - Login fail via Tfa app, 1023 - Login fail brute force, 1024 - Login success via api tfa, 1025 - Login fail via api tfa, 1026 - Login fail recaptcha, 4000 - User created, 4001 - Guest created, 4002 - User created via invite, 4003 - Guest created via invite, 4004 - User activated, 4005 - Guest activated, 4006 - User updated, 4007 - User updated language, 4008 - User added avatar, 4009 - User deleted avatar, 4010 - User updated avatar thumbnails, 4011 - User linked social account, 4012 - User unlinked social account, 4013 - User sent activation instructions, 4014 - User sent email change instructions, 4015 - User sent password change instructions, 4016 - User sent delete instructions, 4017 - User updated password, 4018 - User deleted, 4019 - Users updated type, 4020 - Users updated status, 4021 - Users sent activation instructions, 4022 - Users deleted, 4023 - Sent invite instructions, 4024 - User imported, 4025 - Guest imported, 4026 - Group created, 4027 - Group updated, 4028 - Group deleted, 4029 - User updated mobile number, 4030 - User data reassigns, 4031 - User data removing, 4032 - User connected tfa app, 4033 - User disconnected tfa app, 4034 - User logout active connections, 4035 - User logout active connection, 4036 - User logout active connections for user, 4037 - Send join invite, 5000 - File created, 5001 - File renamed, 5002 - File updated, 5003 - File created version, 5004 - File deleted version, 5005 - File updated revision comment, 5006 - File locked, 5007 - File unlocked, 5008 - File updated access, 5009 - File downloaded, 5010 - File downloaded as, 5011 - File uploaded, 5012 - File imported, 5013 - File copied, 5014 - File copied with overwriting, 5015 - File moved, 5016 - File moved with overwriting, 5017 - File moved to trash, 5018 - File deleted, 5019 - Folder created, 5020 - Folder renamed, 5021 - Folder updated access, 5022 - Folder copied, 5023 - Folder copied with overwriting, 5024 - Folder moved, 5025 - Folder moved with overwriting, 5026 - Folder moved to trash, 5027 - Folder deleted, 5028 - ThirdParty created, 5029 - ThirdParty updated, 5030 - ThirdParty deleted, 5031 - Documents ThirdParty settings updated, 5032 - Documents overwriting settings updated, 5033 - Documents uploading formats settings updated, 5034 - User file updated, 5035 - File converted, 5036 - File send access link, 5037 - Document service location setting, 5038 - Authorization keys setting, 5039 - Full text search setting, 5040 - Start transfer setting, 5041 - Start backup setting, 5042 - License key uploaded, 5043 - File change owner, 5044 - File restore version, 5045 - Document send to sign, 5046 - Document sign complete, 5047 - User updated email, 5048 - Documents store forcesave, 5049 - Documents forcesave, 5050 - Start storage encryption, 5051 - Privacy room enable, 5052 - Privacy room disable, 5053 - Start storage decryption, 5054 - File opened for change, 5055 - File marked as favorite, 5056 - File removed from favorite, 5057 - Folder downloaded, 5058 - File removed from list, 5059 - Folder removed from list, 5060 - File external link access updated, 5061 - Trash emptied, 5062 - File revision downloaded, 5063 - File marked as read, 5064 - File readed, 5065 - Folder marked as read, 5066 - Folder updated access for, 5068 - File updated access for, 5069 - Documents external share settings updated, 5070 - Room created, 5071 - Room renamed, 5072 - Room archived, 5073 - Room unarchived, 5074 - Room deleted, 5075 - Room update access for user, 5076 - Tag created, 5077 - Tags deleted, 5078 - Added room tags, 5079 - Deleted room tags, 5080 - Room logo created, 5081 - Room logo deleted, 5082 - Room invitation link updated, 5083 - Documents keep new file name settings updated, 5084 - Room remove user, 5085 - Room create user, 5086 - Room invitation link created, 5087 - Room invitation link deleted, 5088 - Room external link created, 5089 - Room external link updated, 5090 - Room external link deleted, 5091 - File external link created, 5092 - File external link updated, 5093 - File external link deleted, 5094 - Room group added, 5095 - Room update access for group, 5096 - Room group remove, 5097 - Room external link revoked, 5098 - Room external link renamed, 5099 - File uploaded with overwriting, 5100 - Room copied, 6000 - Language settings updated, 6001 - Time zone settings updated, 6002 - Dns settings updated, 6003 - Trusted mail domain settings updated, 6004 - Password strength settings updated, 6005 - Two factor authentication settings updated, 6006 - Administrator message settings updated, 6007 - Default start page settings updated, 6008 - Products list updated, 6009 - Administrator added, 6010 - Administrator opened full access, 6011 - Administrator deleted, 6012 - Users opened product access, 6013 - Groups opened product access, 6014 - Product access opened, 6015 - Product access restricted, 6016 - Product added administrator, 6017 - Product deleted administrator, 6018 - Greeting settings updated, 6019 - Team template changed, 6020 - Color theme changed, 6021 - Owner sent change owner instructions, 6022 - Owner updated, 6023 - Owner sent portal deactivation instructions, 6024 - Owner sent portal delete instructions, 6025 - Portal deactivated, 6026 - Portal deleted, 6027 - Login history report downloaded, 6028 - Audit trail report downloaded, 6029 - SSO enabled, 6030 - SSO disabled, 6031 - Portal access settings updated, 6032 - Cookie settings updated, 6033 - Mail service settings updated, 6034 - Custom navigation settings updated, 6035 - Audit settings updated, 6036 - Two factor authentication disabled, 6037 - Two factor authentication enabled by sms, 6038 - Two factor authentication enabled by tfa app, 6039 - Portal renamed, 6040 - Quota per room changed, 6041 - Quota per room disabled, 6042 - Quota per user changed, 6043 - Quota per user disabled, 6044 - Quota per portal changed, 6045 - Quota per portal disabled, 6046 - Form submit, 6047 - Form opened for filling, 6048 - Custom quota per room default, 6049 - Custom quota per room changed, 6050 - Custom quota per room disabled, 6051 - Custom quota per user default, 6052 - Custom quota per user changed, 6053 - Custom quota per user disabled, 7000 - Contact admin mail sent, 7001 - Room invite link used, 7002 - User created and added to room, 7003 - Guest created and added to room, 7004 - Contact sales mail sent, -1 - None]",
        "format": "int32"
      },
      "ASC.Migration.Core.Models.Api.MigratingApiFiles": {
        "type": "object",
        "properties": {
          "foldersCount": {
            "type": "integer",
            "description": "FoldersCount",
            "format": "int32",
            "example": 1234
          },
          "filesCount": {
            "type": "integer",
            "description": "FilesCount",
            "format": "int32",
            "example": 1234
          },
          "bytesTotal": {
            "type": "integer",
            "description": "BytesTotal",
            "format": "int64",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Migration.Core.Models.Api.MigratingApiGroup": {
        "type": "object",
        "properties": {
          "shouldImport": {
            "type": "boolean",
            "description": "Should import",
            "example": true
          },
          "groupName": {
            "type": "string",
            "description": "Group name",
            "nullable": true,
            "example": "some text"
          },
          "moduleName": {
            "type": "string",
            "description": "Module name",
            "nullable": true,
            "example": "some text"
          },
          "userUidList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of user uid",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Migration.Core.Models.Api.MigratingApiUser": {
        "type": "object",
        "properties": {
          "shouldImport": {
            "type": "boolean",
            "description": "Should import",
            "example": true
          },
          "key": {
            "type": "string",
            "description": "Key",
            "nullable": true,
            "example": "some text"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true,
            "example": "some text"
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "nullable": true,
            "example": "some text"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true,
            "example": "some text"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true,
            "example": "some text"
          },
          "userType": {
            "$ref": "#/components/schemas/ASC.Core.Users.EmployeeType"
          },
          "migratingFiles": {
            "$ref": "#/components/schemas/ASC.Migration.Core.Models.Api.MigratingApiFiles"
          }
        },
        "additionalProperties": false
      },
      "ASC.Migration.Core.Models.Api.MigrationApiInfo": {
        "type": "object",
        "properties": {
          "migratorName": {
            "type": "string",
            "description": "Migrator name",
            "nullable": true,
            "example": "some text"
          },
          "operation": {
            "type": "string",
            "description": "Operation",
            "nullable": true,
            "example": "some text"
          },
          "failedArchives": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Failed archives",
            "nullable": true,
            "example": "some text"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Migration.Core.Models.Api.MigratingApiUser"
            },
            "description": "Users",
            "nullable": true
          },
          "withoutEmailUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Migration.Core.Models.Api.MigratingApiUser"
            },
            "description": "Without email users",
            "nullable": true
          },
          "existUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Migration.Core.Models.Api.MigratingApiUser"
            },
            "description": "Exist users",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Migration.Core.Models.Api.MigratingApiGroup"
            },
            "description": "Groups",
            "nullable": true
          },
          "importPersonalFiles": {
            "type": "boolean",
            "description": "Import personal files",
            "example": true
          },
          "importSharedFiles": {
            "type": "boolean",
            "description": "Import shared files",
            "example": true
          },
          "importSharedFolders": {
            "type": "boolean",
            "description": "Import shared folders",
            "example": true
          },
          "importCommonFiles": {
            "type": "boolean",
            "description": "Import common files",
            "example": true
          },
          "importProjectFiles": {
            "type": "boolean",
            "description": "Import project files",
            "example": true
          },
          "importGroups": {
            "type": "boolean",
            "description": "Import groups",
            "example": true
          },
          "successedUsers": {
            "type": "integer",
            "description": "Successed users",
            "format": "int32",
            "example": 1234
          },
          "failedUsers": {
            "type": "integer",
            "description": "Failed users",
            "format": "int32",
            "example": 1234
          },
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Files",
            "nullable": true,
            "example": "some text"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Errors",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Security.Cryptography.EmailValidationKeyModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key",
            "nullable": true,
            "example": "some text"
          },
          "emplType": {
            "$ref": "#/components/schemas/ASC.Core.Users.EmployeeType"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true,
            "example": "some text"
          },
          "uiD": {
            "type": "string",
            "description": "User ID",
            "format": "uuid",
            "nullable": true,
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "type": {
            "$ref": "#/components/schemas/ASC.Web.Studio.Utility.ConfirmType"
          },
          "first": {
            "type": "string",
            "description": "Access an account for the first time or not",
            "nullable": true,
            "example": "some text"
          },
          "roomId": {
            "type": "string",
            "description": "Room ID",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Security.Cryptography.EmailValidationKeyProvider_ValidationResult": {
        "enum": [
          "Ok",
          "Invalid",
          "Expired",
          "TariffLimit",
          "UserExisted",
          "UserExcluded",
          "QuotaFailed"
        ],
        "type": "integer",
        "description": "[0 - Ok, 1 - Invalid, 2 - Expired, 3 - Tariff limit, 4 - User existed, 5 - User excluded, 6 - Quota failed]",
        "format": "int32"
      },
      "ASC.Security.Cryptography.PasswordHasher": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "description": "Size",
            "format": "int32",
            "readOnly": true,
            "example": 1234
          },
          "iterations": {
            "type": "integer",
            "description": "Iterations",
            "format": "int32",
            "readOnly": true,
            "example": 1234
          },
          "salt": {
            "type": "string",
            "description": "Salt",
            "nullable": true,
            "readOnly": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.AdminMessageBaseSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true,
            "example": "some text"
          },
          "culture": {
            "type": "string",
            "description": "Culture",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.AdminMessageSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true,
            "example": "some text"
          },
          "culture": {
            "type": "string",
            "description": "Culture",
            "nullable": true,
            "example": "some text"
          },
          "message": {
            "type": "string",
            "description": "Message",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.AuthRequestsDto": {
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "Username / email",
            "nullable": true,
            "example": "some text"
          },
          "password": {
            "type": "string",
            "description": "Password",
            "nullable": true,
            "example": "some text"
          },
          "passwordHash": {
            "type": "string",
            "description": "Password hash",
            "nullable": true,
            "example": "some text"
          },
          "provider": {
            "type": "string",
            "description": "Provider type",
            "nullable": true,
            "example": "some text"
          },
          "accessToken": {
            "type": "string",
            "description": "Provider access token",
            "nullable": true,
            "example": "some text"
          },
          "serializedProfile": {
            "type": "string",
            "description": "Serialized user profile",
            "nullable": true,
            "example": "some text"
          },
          "code": {
            "type": "string",
            "description": "Two-factor authentication code",
            "nullable": true,
            "example": "some text"
          },
          "codeOAuth": {
            "type": "string",
            "description": "Code for getting a token",
            "nullable": true,
            "example": "some text"
          },
          "session": {
            "type": "boolean",
            "description": "Session based authentication or not",
            "example": true
          },
          "confirmData": {
            "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.RequestsDto.ConfirmData"
          },
          "recaptchaType": {
            "$ref": "#/components/schemas/ASC.Web.Core.RecaptchaType"
          },
          "recaptchaResponse": {
            "type": "string",
            "description": "reCAPTCHA response",
            "nullable": true,
            "example": "some text"
          },
          "culture": {
            "type": "string",
            "description": "Culture",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.AuthServiceRequestsDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "some text"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "some text"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true,
            "example": "some text"
          },
          "instruction": {
            "type": "string",
            "description": "Instruction",
            "nullable": true,
            "example": "some text"
          },
          "canSet": {
            "type": "boolean",
            "description": "Specifies if the authentication service can be set or not",
            "example": "some text"
          },
          "props": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.AuthKey"
            },
            "description": "List of authorization keys",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.ConfirmData": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address",
            "nullable": true,
            "example": "some text"
          },
          "first": {
            "type": "boolean",
            "description": "Access an account for the first time or not",
            "nullable": true,
            "example": true
          },
          "key": {
            "type": "string",
            "description": "Key",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.GreetingSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Tenant name",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.IpRestrictionsBaseRequestsDto": {
        "type": "object",
        "properties": {
          "ipRestrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.IPSecurity.IpRestrictionBase"
            },
            "description": "List of IP addresses",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.IpRestrictionsRequestsDto": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "Enables IP restrictions or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.LogoRequestsDto": {
        "type": "object",
        "properties": {
          "light": {
            "type": "string",
            "description": "Light theme logo",
            "nullable": true
          },
          "dark": {
            "type": "string",
            "description": "Dark theme logo",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ASC.Web.Api.ApiModel.RequestsDto.MailDomainSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantTrustedDomainsType"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of trusted domains",
            "nullable": true,
            "example": "some text"
          },
          "inviteUsersAsVisitors": {
            "type": "boolean",
            "description": "Invites as a user or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.MobileRequestsDto": {
        "type": "object",
        "properties": {
          "mobilePhone": {
            "type": "string",
            "description": "Mobile phone",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.OwnerIdSettingsRequestDto": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string",
            "description": "Owner ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.QuotaSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "enableQuota": {
            "type": "boolean",
            "description": "Specifies if the quota settings are enabled or not",
            "example": true
          },
          "defaultQuota": {
            "description": "Default quota value",
            "format": "int64",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.SchemaBaseRequestsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Team template ID",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.SchemaRequestsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Team template ID",
            "nullable": true,
            "example": "some text"
          },
          "name": {
            "type": "string",
            "description": "Team template name",
            "nullable": true,
            "example": "some text"
          },
          "userCaption": {
            "type": "string",
            "description": "User caption",
            "nullable": true,
            "example": "some text"
          },
          "usersCaption": {
            "type": "string",
            "description": "Users caption",
            "nullable": true,
            "example": "some text"
          },
          "groupCaption": {
            "type": "string",
            "description": "Group caption",
            "nullable": true,
            "example": "some text"
          },
          "groupsCaption": {
            "type": "string",
            "description": "Groups caption",
            "nullable": true,
            "example": "some text"
          },
          "userPostCaption": {
            "type": "string",
            "description": "User status caption",
            "nullable": true,
            "example": "some text"
          },
          "regDateCaption": {
            "type": "string",
            "description": "Registration date caption",
            "nullable": true,
            "example": "some text"
          },
          "groupHeadCaption": {
            "type": "string",
            "description": "Group lead caption",
            "nullable": true,
            "example": "some text"
          },
          "guestCaption": {
            "type": "string",
            "description": "Guest caption",
            "nullable": true,
            "example": "some text"
          },
          "guestsCaption": {
            "type": "string",
            "description": "Guests caption",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.SecurityRequestsDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "administrator": {
            "type": "boolean",
            "description": "Administrator or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.ShortenLinkRequestsDto": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": "Link",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.SsoSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "serializeSettings": {
            "type": "string",
            "description": "Serialized SSO settings",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.StorageEncryptionRequestsDto": {
        "type": "object",
        "properties": {
          "notifyUsers": {
            "type": "boolean",
            "description": "Specifies if the users will be notified about the encryption process or note",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.StorageRequestsDto": {
        "type": "object",
        "properties": {
          "module": {
            "type": "string",
            "description": "Storage name",
            "nullable": true,
            "example": "some text"
          },
          "props": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Api.Collections.ItemKeyValuePair<System.String, System.String>"
            },
            "description": "Storage properties",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.TenantQuotaSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "tenantId": {
            "type": "integer",
            "description": "Tenant ID",
            "format": "int32",
            "example": 1234
          },
          "quota": {
            "type": "integer",
            "description": "Quota",
            "format": "int64",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.TfaRequestsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "TFA type (None, Sms, or App)",
            "nullable": true,
            "example": "None"
          },
          "id": {
            "type": "string",
            "description": "User ID",
            "format": "uuid",
            "nullable": true,
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "trustedIps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of trusted IP addresses",
            "nullable": true,
            "example": "some text"
          },
          "mandatoryUsers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of users who must use the TFA verification",
            "nullable": true,
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "mandatoryGroups": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of groups who must use the TFA verification",
            "nullable": true,
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.TfaSettingsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "nullable": true,
            "example": "some text"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "some text"
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the TFA settings are enabled or not",
            "example": true
          },
          "avaliable": {
            "type": "boolean",
            "description": "Specifies if the TFA settings are available or not",
            "example": true
          },
          "trustedIps": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of trusted IP addresses",
            "nullable": true,
            "example": "some text"
          },
          "mandatoryUsers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of users who must use the TFA verification",
            "nullable": true,
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "mandatoryGroups": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of groups who must use the TFA verification",
            "nullable": true,
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.TfaValidateRequestsDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "TFA code",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.TimezonesRequestsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Time zone ID",
            "nullable": true,
            "example": "some text"
          },
          "displayName": {
            "type": "string",
            "description": "Time zone display name",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.TipsRequestDto": {
        "type": "object",
        "properties": {
          "show": {
            "type": "boolean",
            "description": "Specifies whether to show tips for the user or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.TurnOnAdminMessageSettingsRequestDto": {
        "type": "object",
        "properties": {
          "turnOn": {
            "type": "boolean",
            "description": "Specifies if the administrator messages are enabled or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.WebItemSecurityRequestsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Module ID",
            "nullable": true,
            "example": "some text"
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the module security settings are enabled or not",
            "example": true
          },
          "subjects": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of user/group IDs with the access to the module",
            "nullable": true,
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.WebItemsSecurityRequestsDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Api.Collections.ItemKeyValuePair<System.String, System.Boolean>"
            },
            "description": "Products with security information",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.WebPluginRequestsDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Enabled",
            "example": true
          },
          "settings": {
            "type": "string",
            "description": "Settings",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.RequestsDto.WhiteLabelRequestsDto": {
        "type": "object",
        "properties": {
          "logoText": {
            "type": "string",
            "description": "Logo text",
            "nullable": true
          },
          "logo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Api.Collections.ItemKeyValuePair<System.String, ASC.Web.Api.ApiModel.RequestsDto.LogoRequestsDto>"
            },
            "description": "Tenant IDs with their logos (light or dark)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": ""
      },
      "ASC.Web.Api.ApiModel.RequestsDto.WizardRequestsDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true,
            "example": "some text"
          },
          "passwordHash": {
            "type": "string",
            "description": "Password hash",
            "nullable": true,
            "example": "some text"
          },
          "lng": {
            "type": "string",
            "description": "Language",
            "nullable": true,
            "example": "some text"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone",
            "nullable": true,
            "example": "some text"
          },
          "amiId": {
            "type": "string",
            "description": "AMI ID",
            "nullable": true,
            "example": "some text"
          },
          "subscribeFromSite": {
            "type": "boolean",
            "description": "Subscribed from the site or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.AuditEventDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32",
            "example": 1234
          },
          "date": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          },
          "user": {
            "type": "string",
            "description": "User",
            "nullable": true,
            "example": "some text"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "action": {
            "type": "string",
            "description": "Action",
            "nullable": true,
            "example": "some text"
          },
          "actionId": {
            "$ref": "#/components/schemas/ASC.MessagingSystem.Core.MessageAction"
          },
          "ip": {
            "type": "string",
            "description": "IP",
            "nullable": true,
            "example": "some text"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true,
            "example": "some text"
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "some text"
          },
          "browser": {
            "type": "string",
            "description": "Browser",
            "nullable": true,
            "example": "some text"
          },
          "platform": {
            "type": "string",
            "description": "Platform",
            "nullable": true,
            "example": "some text"
          },
          "page": {
            "type": "string",
            "description": "Page",
            "nullable": true,
            "example": "some text"
          },
          "actionType": {
            "$ref": "#/components/schemas/ASC.AuditTrail.Types.ActionType"
          },
          "product": {
            "$ref": "#/components/schemas/ASC.AuditTrail.Types.ProductType"
          },
          "module": {
            "$ref": "#/components/schemas/ASC.AuditTrail.Types.ModuleType"
          },
          "target": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of targets",
            "nullable": true,
            "example": "some text"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.AuditTrail.Types.EntryType"
            },
            "description": "List of entry types",
            "nullable": true,
            "example": "None"
          },
          "context": {
            "type": "string",
            "description": "Context",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.AuthenticationTokenDto": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Authentication token",
            "nullable": true,
            "example": "abcde12345"
          },
          "expires": {
            "type": "string",
            "description": "Token expiration time",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "sms": {
            "type": "boolean",
            "description": "Specifies if the authentication code is sent by SMS or not",
            "example": false
          },
          "phoneNoise": {
            "type": "string",
            "description": "Phone number",
            "nullable": true,
            "example": "null"
          },
          "tfa": {
            "type": "boolean",
            "description": "Specifies if the two-factor application is used or not",
            "example": false
          },
          "tfaKey": {
            "type": "string",
            "description": "Two-factor authentication key",
            "nullable": true,
            "example": "null"
          },
          "confirmUrl": {
            "type": "string",
            "description": "Confirmation email URL",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.CapabilitiesDto": {
        "type": "object",
        "properties": {
          "ldapEnabled": {
            "type": "boolean",
            "description": "Specifies if the LDAP settings are enabled or not",
            "example": true
          },
          "ldapDomain": {
            "type": "string",
            "description": "Ldap domain",
            "nullable": true,
            "example": "some text"
          },
          "providers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of providers",
            "nullable": true,
            "example": "some text"
          },
          "ssoLabel": {
            "type": "string",
            "description": "SP login label",
            "nullable": true,
            "example": "some text"
          },
          "oauthEnabled": {
            "type": "boolean",
            "description": "Specifies if OAuth is enabled or not",
            "example": true
          },
          "ssoUrl": {
            "type": "string",
            "description": "SSO URL. If this parameter is empty, then the SSO settings are disabled",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.ChartPointDto": {
        "type": "object",
        "properties": {
          "displayDate": {
            "type": "string",
            "description": "Display date",
            "nullable": true,
            "example": "some text"
          },
          "date": {
            "type": "string",
            "description": "Date",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "hosts": {
            "type": "integer",
            "description": "Hosts",
            "format": "int32",
            "example": 0
          },
          "hits": {
            "type": "integer",
            "description": "Hits",
            "format": "int32",
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.DeepLinkDto": {
        "type": "object",
        "properties": {
          "androidPackageName": {
            "type": "string",
            "description": "Android package name",
            "nullable": true,
            "example": "some text"
          },
          "url": {
            "type": "string",
            "description": "Url",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          },
          "iosPackageId": {
            "type": "string",
            "description": "Ios package id",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.FirebaseDto": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "API key",
            "nullable": true,
            "example": "some text"
          },
          "authDomain": {
            "type": "string",
            "description": "Authentication domain",
            "nullable": true,
            "example": "some text"
          },
          "projectId": {
            "type": "string",
            "description": "Project ID",
            "nullable": true,
            "example": "some text"
          },
          "storageBucket": {
            "type": "string",
            "description": "Storage bucket",
            "nullable": true,
            "example": "some text"
          },
          "messagingSenderId": {
            "type": "string",
            "description": "Message sender ID",
            "nullable": true,
            "example": "some text"
          },
          "appId": {
            "type": "string",
            "description": "Application ID",
            "nullable": true,
            "example": "some text"
          },
          "measurementId": {
            "type": "string",
            "description": "Measurement ID",
            "nullable": true,
            "example": "some text"
          },
          "databaseURL": {
            "type": "string",
            "description": "Database URL",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.FormGalleryDto": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path",
            "nullable": true,
            "example": "some text"
          },
          "domain": {
            "type": "string",
            "description": "Domain",
            "nullable": true,
            "example": "some text"
          },
          "ext": {
            "type": "string",
            "description": "Ext",
            "nullable": true,
            "example": "some text"
          },
          "uploadPath": {
            "type": "string",
            "description": "Upload path",
            "nullable": true,
            "example": "some text"
          },
          "uploadDomain": {
            "type": "string",
            "description": "Upload domain",
            "nullable": true,
            "example": "some text"
          },
          "uploadExt": {
            "type": "string",
            "description": "Upload ext",
            "nullable": true,
            "example": "some text"
          },
          "uploadDashboard": {
            "type": "string",
            "description": "Upload dashboard",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.LoginEventDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32",
            "example": 1234
          },
          "date": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          },
          "user": {
            "type": "string",
            "description": "User",
            "nullable": true,
            "example": "some text"
          },
          "userId": {
            "type": "string",
            "description": "User ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "login": {
            "type": "string",
            "description": "Login",
            "nullable": true,
            "example": "some text"
          },
          "action": {
            "type": "string",
            "description": "Action",
            "nullable": true,
            "example": "some text"
          },
          "actionId": {
            "$ref": "#/components/schemas/ASC.MessagingSystem.Core.MessageAction"
          },
          "ip": {
            "type": "string",
            "description": "IP",
            "nullable": true,
            "example": "some text"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true,
            "example": "some text"
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "some text"
          },
          "browser": {
            "type": "string",
            "description": "Browser",
            "nullable": true,
            "example": "some text"
          },
          "platform": {
            "type": "string",
            "description": "Platform",
            "nullable": true,
            "example": "some text"
          },
          "page": {
            "type": "string",
            "description": "Page",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.PluginsDto": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the plugins are enabled or not",
            "example": true
          },
          "upload": {
            "type": "boolean",
            "description": "Specifies if the plugins can be uploaded or not",
            "example": true
          },
          "delete": {
            "type": "boolean",
            "description": "Specifies if the plugins can be deleted or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.SecurityDto": {
        "type": "object",
        "properties": {
          "webItemId": {
            "type": "string",
            "description": "Module ID",
            "nullable": true,
            "example": "some text"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
            },
            "description": "List of users with the access to the module",
            "nullable": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Api.Models.GroupSummaryDto"
            },
            "description": "List of groups with the access to the module",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the security settings are enabled or not",
            "example": true
          },
          "isSubItem": {
            "type": "boolean",
            "description": "Specifies if this module is a subitem or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.SettingsDto": {
        "type": "object",
        "properties": {
          "timezone": {
            "type": "string",
            "description": "Time zone",
            "nullable": true,
            "example": "some text"
          },
          "trustedDomains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of trusted domains",
            "nullable": true,
            "example": "mydomain.com"
          },
          "trustedDomainsType": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantTrustedDomainsType"
          },
          "culture": {
            "type": "string",
            "description": "Language",
            "nullable": true,
            "example": "en-US"
          },
          "utcOffset": {
            "type": "string",
            "description": "UTC offset",
            "format": "date-span"
          },
          "utcHoursOffset": {
            "type": "number",
            "description": "UTC hours offset",
            "format": "double",
            "example": -8.5
          },
          "greetingSettings": {
            "type": "string",
            "description": "Greeting settings",
            "nullable": true,
            "example": "Web Office Applications"
          },
          "ownerId": {
            "type": "string",
            "description": "Owner ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "nameSchemaId": {
            "type": "string",
            "description": "Team template ID",
            "nullable": true,
            "example": "some text"
          },
          "enabledJoin": {
            "type": "boolean",
            "description": "Specifies if a user can join to the portal or not",
            "nullable": true,
            "example": true
          },
          "enableAdmMess": {
            "type": "boolean",
            "description": "Specifies if a user can send a message to the administrator or not",
            "nullable": true,
            "example": true
          },
          "thirdpartyEnable": {
            "type": "boolean",
            "description": "Specifies if a user can connect third-party providers or not",
            "nullable": true,
            "example": true
          },
          "docSpace": {
            "type": "boolean",
            "description": "Specifies if this is a DocSpace portal or not",
            "example": true
          },
          "standalone": {
            "type": "boolean",
            "description": "Specifies if this is a standalone portal or not",
            "example": true
          },
          "baseDomain": {
            "type": "string",
            "description": "Base domain",
            "nullable": true,
            "example": "some text"
          },
          "wizardToken": {
            "type": "string",
            "description": "Wizard token",
            "nullable": true,
            "example": "some text"
          },
          "passwordHash": {
            "$ref": "#/components/schemas/ASC.Security.Cryptography.PasswordHasher"
          },
          "firebase": {
            "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.FirebaseDto"
          },
          "version": {
            "type": "string",
            "description": "Version",
            "nullable": true,
            "example": "some text"
          },
          "recaptchaType": {
            "$ref": "#/components/schemas/ASC.Web.Core.RecaptchaType"
          },
          "recaptchaPublicKey": {
            "type": "string",
            "description": "ReCAPTCHA public key",
            "nullable": true,
            "example": "some text"
          },
          "debugInfo": {
            "type": "boolean",
            "description": "Specifies if the debug information will be sent or not",
            "example": true
          },
          "socketUrl": {
            "type": "string",
            "description": "Socket URL",
            "nullable": true,
            "example": "some text"
          },
          "tenantStatus": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantStatus"
          },
          "tenantAlias": {
            "type": "string",
            "description": "Tenant alias",
            "nullable": true,
            "example": "some text"
          },
          "helpLink": {
            "type": "string",
            "description": "Link to the help",
            "nullable": true,
            "example": "some text"
          },
          "forumLink": {
            "type": "string",
            "description": "Link to the forum",
            "nullable": true,
            "example": "some text"
          },
          "apiDocsLink": {
            "type": "string",
            "description": "API documentation link",
            "nullable": true,
            "example": "some text"
          },
          "domainValidator": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantDomainValidator"
          },
          "zendeskKey": {
            "type": "string",
            "description": "Zendesk key",
            "nullable": true,
            "example": "some text"
          },
          "tagManagerId": {
            "type": "string",
            "description": "Tag manager ID",
            "nullable": true,
            "example": "some text"
          },
          "bookTrainingEmail": {
            "type": "string",
            "description": "Email for training booking",
            "nullable": true,
            "example": "some text"
          },
          "documentationEmail": {
            "type": "string",
            "description": "Documentation email",
            "nullable": true,
            "example": "some text"
          },
          "legalTerms": {
            "type": "string",
            "description": "Legal terms",
            "nullable": true,
            "example": "some text"
          },
          "cookieSettingsEnabled": {
            "type": "boolean",
            "description": "Specifies whether the cookie settings are enabled",
            "example": true
          },
          "limitedAccessSpace": {
            "type": "boolean",
            "description": "Limited access space",
            "example": true
          },
          "userNameRegex": {
            "type": "string",
            "description": "User name validation regex",
            "nullable": true,
            "example": "some text"
          },
          "invitationLimit": {
            "type": "integer",
            "description": "Invitation limit",
            "format": "int32",
            "nullable": true,
            "example": 1234
          },
          "plugins": {
            "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.PluginsDto"
          },
          "deepLink": {
            "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.DeepLinkDto"
          },
          "formGallery": {
            "$ref": "#/components/schemas/ASC.Web.Api.ApiModel.ResponseDto.FormGalleryDto"
          },
          "maxImageUploadSize": {
            "type": "integer",
            "description": "Max image upload size",
            "format": "int64",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.SmtpSettingsDto": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host",
            "nullable": true,
            "example": "mail.example.com"
          },
          "port": {
            "type": "integer",
            "description": "Port",
            "format": "int32",
            "nullable": true,
            "example": 25
          },
          "senderAddress": {
            "type": "string",
            "description": "Sender address",
            "nullable": true,
            "example": "notify@example.com"
          },
          "senderDisplayName": {
            "type": "string",
            "description": "Sender display name",
            "nullable": true,
            "example": "Postman"
          },
          "credentialsUserName": {
            "type": "string",
            "description": "Credentials username",
            "nullable": true,
            "example": "notify@example.com"
          },
          "credentialsUserPassword": {
            "type": "string",
            "description": "Credentials user password",
            "nullable": true,
            "example": "{password}"
          },
          "enableSSL": {
            "type": "boolean",
            "description": "Enables SSL or not",
            "example": true
          },
          "enableAuth": {
            "type": "boolean",
            "description": "Enables authentication or not",
            "example": false
          },
          "useNtlm": {
            "type": "boolean",
            "description": "Specifies whether to use NTLM or not",
            "example": false
          },
          "isDefaultSettings": {
            "type": "boolean",
            "description": "Specifies if the current settings are default or not",
            "example": false
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.StorageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "nullable": true,
            "example": "some text"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "some text"
          },
          "properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.AuthKey"
            },
            "description": "List of authentication keys",
            "nullable": true
          },
          "current": {
            "type": "boolean",
            "description": "Specifies if this is the current storage or not",
            "example": true
          },
          "isSet": {
            "type": "boolean",
            "description": "Specifies if this storage can be set or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModel.ResponseDto.UsageSpaceStatItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "Item name"
          },
          "icon": {
            "type": "string",
            "description": "Icon",
            "nullable": true,
            "example": "Item icon path"
          },
          "disabled": {
            "type": "boolean",
            "description": "Specifies if the module space is disabled or not",
            "example": false
          },
          "size": {
            "type": "string",
            "description": "Size",
            "nullable": true,
            "example": "0 Byte"
          },
          "url": {
            "type": "string",
            "description": "URL",
            "format": "uri",
            "nullable": true,
            "example": "Item url"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.RequestsDto.CspRequestsDto": {
        "type": "object",
        "properties": {
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Domains",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.RequestsDto.CustomColorThemesSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "theme": {
            "$ref": "#/components/schemas/ASC.Web.Core.Utility.Settings.CustomColorThemesSettingsItem"
          },
          "selected": {
            "type": "integer",
            "description": "Selected or not",
            "format": "int32",
            "nullable": true,
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.RequestsDto.FinishDto": {
        "type": "object",
        "properties": {
          "isSendWelcomeEmail": {
            "type": "boolean",
            "description": "Is send welcome email",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.RequestsDto.FirebaseRequestsDto": {
        "type": "object",
        "properties": {
          "firebaseDeviceToken": {
            "type": "string",
            "description": "Firebase device token",
            "nullable": true,
            "example": "some text"
          },
          "isSubscribed": {
            "type": "boolean",
            "description": "Specifies if the user is subscribed to the push notification or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.RequestsDto.LoginSettingsRequestDto": {
        "type": "object",
        "properties": {
          "attemptCount": {
            "maximum": 9999,
            "minimum": 1,
            "type": "integer",
            "description": "Maximum number of the user attempts to log in",
            "format": "int32",
            "example": 1234
          },
          "blockTime": {
            "maximum": 9999,
            "minimum": 1,
            "type": "integer",
            "description": "The duration of the account suspension for unsuccessful login attempts",
            "format": "int32",
            "example": 1234
          },
          "checkPeriod": {
            "maximum": 9999,
            "minimum": 1,
            "type": "integer",
            "description": "Expected server response time",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.RequestsDto.NotificationSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ASC.Web.Core.Notify.NotificationType"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Specifies if the notification type is enabled or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.RequestsDto.RoomsNotificationsSettingsRequestDto": {
        "type": "object",
        "properties": {
          "roomsId": {
            "description": "Room ID",
            "nullable": true,
            "example": 1234
          },
          "mute": {
            "type": "boolean",
            "description": "Specifies if the room notifications are disabled or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.RequestsDto.WebhookRetryRequestsDto": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of webhook IDs",
            "nullable": true,
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.RequestsDto.WebhooksConfigRequestsDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32",
            "example": 1234
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "some text"
          },
          "uri": {
            "type": "string",
            "description": "URI",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          },
          "secretKey": {
            "type": "string",
            "description": "Secret key",
            "nullable": true,
            "example": "some text"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled or not",
            "nullable": true,
            "example": true
          },
          "ssl": {
            "type": "boolean",
            "description": "SSL",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.ActiveConnectionsDto": {
        "type": "object",
        "properties": {
          "loginEvent": {
            "type": "integer",
            "description": "Login event",
            "format": "int32",
            "example": 1234
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.ActiveConnectionsItemDto"
            },
            "description": "Items",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.ActiveConnectionsItemDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id",
            "format": "int32",
            "example": 1234
          },
          "tenantId": {
            "type": "integer",
            "description": "Tenant id",
            "format": "int32",
            "example": 1234
          },
          "userId": {
            "type": "string",
            "description": "User id",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "mobile": {
            "type": "boolean",
            "description": "Mobile",
            "example": true
          },
          "ip": {
            "type": "string",
            "description": "Ip",
            "nullable": true,
            "example": "some text"
          },
          "country": {
            "type": "string",
            "description": "Country",
            "nullable": true,
            "example": "some text"
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "some text"
          },
          "browser": {
            "type": "string",
            "description": "Browser",
            "nullable": true,
            "example": "some text"
          },
          "platform": {
            "type": "string",
            "description": "Platform",
            "nullable": true,
            "example": "some text"
          },
          "date": {
            "$ref": "#/components/schemas/ASC.Api.Core.ApiDateTime"
          },
          "page": {
            "type": "string",
            "description": "Page",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.AdditionalWhiteLabelSettingsDto": {
        "type": "object",
        "properties": {
          "startDocsEnabled": {
            "type": "boolean",
            "description": "Specifies if the start document is enabled or not",
            "example": true
          },
          "helpCenterEnabled": {
            "type": "boolean",
            "description": "Specifies if the help center is enabled or not",
            "example": true
          },
          "feedbackAndSupportEnabled": {
            "type": "boolean",
            "description": "Specifies if feedback and support are available or not",
            "example": true
          },
          "feedbackAndSupportUrl": {
            "type": "string",
            "description": "Feedback and support URL",
            "nullable": true,
            "example": "some text"
          },
          "userForumEnabled": {
            "type": "boolean",
            "description": "Specifies if the user forum is enabled or not",
            "example": true
          },
          "userForumUrl": {
            "type": "string",
            "description": "User forum URL",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          },
          "videoGuidesEnabled": {
            "type": "boolean",
            "description": "Specifies if the video guides are enabled or not",
            "example": true
          },
          "videoGuidesUrl": {
            "type": "string",
            "description": "Video guides URL",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          },
          "salesEmail": {
            "type": "string",
            "description": "Sales email",
            "nullable": true,
            "example": "some text"
          },
          "buyUrl": {
            "type": "string",
            "description": "URL to pay for the portal",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          },
          "licenseAgreementsEnabled": {
            "type": "boolean",
            "description": "Specifies if the license agreements are enabled or not",
            "example": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Specifies if these settings are default or not",
            "example": true
          },
          "licenseAgreementsUrl": {
            "type": "string",
            "description": "License agreements URL",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.CompanyWhiteLabelSettingsDto": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "description": "Company name",
            "nullable": true,
            "example": "some text"
          },
          "site": {
            "type": "string",
            "description": "Site",
            "nullable": true,
            "example": "some text"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true,
            "example": "some text"
          },
          "address": {
            "type": "string",
            "description": "Address",
            "nullable": true,
            "example": "some text"
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true,
            "example": "some text"
          },
          "isLicensor": {
            "type": "boolean",
            "description": "Specifies if a company is a licensor or not",
            "example": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Specifies if these settings are default or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.ConfirmDto": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ASC.Security.Cryptography.EmailValidationKeyProvider_ValidationResult"
          },
          "roomId": {
            "type": "string",
            "description": "Room id",
            "nullable": true,
            "example": "some text"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.CookieSettingsDto": {
        "type": "object",
        "properties": {
          "lifeTime": {
            "type": "integer",
            "description": "Lifetime value in minutes",
            "format": "int32",
            "example": 1234
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the cookie settings are enabled or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.CspDto": {
        "type": "object",
        "properties": {
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Domains",
            "nullable": true,
            "example": "some text"
          },
          "header": {
            "type": "string",
            "description": "Header",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.CustomColorThemesSettingsDto": {
        "type": "object",
        "properties": {
          "themes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Core.Utility.Settings.CustomColorThemesSettingsItem"
            },
            "description": "Themes",
            "nullable": true
          },
          "selected": {
            "type": "integer",
            "description": "Selected",
            "format": "int32",
            "example": 1234
          },
          "limit": {
            "type": "integer",
            "description": "Limit",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.IsDefaultWhiteLabelLogosDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "White label logo name",
            "nullable": true,
            "example": "some text"
          },
          "default": {
            "type": "boolean",
            "description": "Specifies if the white label logo is default or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.LoginSettingsDto": {
        "type": "object",
        "properties": {
          "attemptCount": {
            "type": "integer",
            "description": "Maximum number of the user attempts to log in",
            "format": "int32",
            "example": 1234
          },
          "blockTime": {
            "type": "integer",
            "description": "The time for which the user will be blocked after unsuccessful login attempts",
            "format": "int32",
            "example": 1234
          },
          "checkPeriod": {
            "type": "integer",
            "description": "The time to wait for a response from the server",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.MigrationStatusDto": {
        "type": "object",
        "properties": {
          "progress": {
            "type": "number",
            "description": "Migration progress",
            "format": "double",
            "example": 1
          },
          "error": {
            "type": "string",
            "description": "Migration error",
            "nullable": true,
            "example": "some text"
          },
          "parseResult": {
            "$ref": "#/components/schemas/ASC.Migration.Core.Models.Api.MigrationApiInfo"
          },
          "isCompleted": {
            "type": "boolean",
            "description": "Specifies whether the migration is completed",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.NotificationSettingsDto": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ASC.Web.Core.Notify.NotificationType"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Specifies if the notification type is enabled or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.PasswordSettingsDto": {
        "type": "object",
        "properties": {
          "minLength": {
            "type": "integer",
            "description": "Min length",
            "format": "int32",
            "example": 1234
          },
          "upperCase": {
            "type": "boolean",
            "description": "Upper case",
            "example": true
          },
          "digits": {
            "type": "boolean",
            "description": "Digits",
            "example": true
          },
          "specSymbols": {
            "type": "boolean",
            "description": "Spec symbols",
            "example": true
          },
          "allowedCharactersRegexStr": {
            "type": "string",
            "description": "Allowed characters regex str",
            "nullable": true,
            "example": "some text"
          },
          "digitsRegexStr": {
            "type": "string",
            "description": "Digits regex str",
            "nullable": true,
            "example": "some text"
          },
          "upperCaseRegexStr": {
            "type": "string",
            "description": "Upper case regex str",
            "nullable": true,
            "example": "some text"
          },
          "specSymbolsRegexStr": {
            "type": "string",
            "description": "Spec symbols regex str",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.RoomsNotificationSettingsDto": {
        "type": "object",
        "properties": {
          "disabledRooms": {
            "type": "array",
            "items": {},
            "description": "List of rooms with the disabled notifications",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.TenantDto": {
        "type": "object",
        "properties": {
          "affiliateId": {
            "type": "string",
            "description": "Affiliate ID",
            "nullable": true,
            "example": "some text"
          },
          "tenantAlias": {
            "type": "string",
            "description": "Tenant alias",
            "nullable": true,
            "example": "some text"
          },
          "calls": {
            "type": "boolean",
            "description": "Specifies if the calls are available for this tenant or not",
            "example": true
          },
          "campaign": {
            "type": "string",
            "description": "Campaign",
            "nullable": true,
            "example": "some text"
          },
          "creationDateTime": {
            "type": "string",
            "description": "Creation date and time",
            "format": "date-time",
            "readOnly": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "hostedRegion": {
            "type": "string",
            "description": "Hosted region",
            "nullable": true,
            "example": "some text"
          },
          "tenantId": {
            "type": "integer",
            "description": "Tenant ID",
            "format": "int32",
            "readOnly": true,
            "example": 1234
          },
          "industry": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantIndustry"
          },
          "language": {
            "type": "string",
            "description": "Language",
            "nullable": true,
            "example": "some text"
          },
          "lastModified": {
            "type": "string",
            "description": "Last modified date",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "mappedDomain": {
            "type": "string",
            "description": "Mapped domain",
            "nullable": true,
            "example": "some text"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "some text"
          },
          "ownerId": {
            "type": "string",
            "description": "Owner ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "paymentId": {
            "type": "string",
            "description": "Payment ID",
            "nullable": true,
            "example": "some text"
          },
          "spam": {
            "type": "boolean",
            "description": "Specifies if the ONLYOFFICE newsletter is allowed or not",
            "example": true
          },
          "status": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantStatus"
          },
          "statusChangeDate": {
            "type": "string",
            "description": "The date and time when the tenant status was changed",
            "format": "date-time",
            "readOnly": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "timeZone": {
            "type": "string",
            "description": "Time zone",
            "nullable": true,
            "example": "some text"
          },
          "trustedDomains": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of trusted domains",
            "nullable": true,
            "example": "some text"
          },
          "trustedDomainsRaw": {
            "type": "string",
            "description": "Trusted domains in the string format",
            "nullable": true,
            "example": "some text"
          },
          "trustedDomainsType": {
            "$ref": "#/components/schemas/ASC.Core.Tenants.TenantTrustedDomainsType"
          },
          "version": {
            "type": "integer",
            "description": "Version",
            "format": "int32",
            "example": 1234
          },
          "versionChanged": {
            "type": "string",
            "description": "The date and time when the tenant version was changed",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.WebPluginDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "some text"
          },
          "version": {
            "type": "string",
            "description": "Version",
            "nullable": true,
            "example": "some text"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true,
            "example": "some text"
          },
          "license": {
            "type": "string",
            "description": "License",
            "nullable": true,
            "example": "some text"
          },
          "author": {
            "type": "string",
            "description": "Author",
            "nullable": true,
            "example": "some text"
          },
          "homePage": {
            "type": "string",
            "description": "Home page",
            "nullable": true,
            "example": "some text"
          },
          "pluginName": {
            "type": "string",
            "description": "PluginName",
            "nullable": true,
            "example": "some text"
          },
          "scopes": {
            "type": "string",
            "description": "Scopes",
            "nullable": true,
            "example": "some text"
          },
          "image": {
            "type": "string",
            "description": "Image",
            "nullable": true,
            "example": "some text"
          },
          "createBy": {
            "$ref": "#/components/schemas/ASC.Web.Api.Models.EmployeeDto"
          },
          "createOn": {
            "type": "string",
            "description": "Create on",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled",
            "example": true
          },
          "system": {
            "type": "boolean",
            "description": "System",
            "example": true
          },
          "url": {
            "type": "string",
            "description": "Url",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          },
          "settings": {
            "type": "string",
            "description": "Settings",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32",
            "example": 1234
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "some text"
          },
          "uri": {
            "type": "string",
            "description": "URI",
            "nullable": true,
            "example": "some text"
          },
          "secretKey": {
            "type": "string",
            "description": "Secret key",
            "nullable": true,
            "example": "some text"
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the webhooks are enabled or not",
            "example": true
          },
          "ssl": {
            "type": "boolean",
            "description": "SSL",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigWithStatusDto": {
        "type": "object",
        "properties": {
          "configs": {
            "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WebhooksConfigDto"
          },
          "status": {
            "type": "integer",
            "description": "Status",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.WebhooksLogDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32",
            "example": 1234
          },
          "configName": {
            "type": "string",
            "description": "Config name",
            "nullable": true,
            "example": "some text"
          },
          "creationTime": {
            "type": "string",
            "description": "Creation time",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "method": {
            "type": "string",
            "description": "Method",
            "nullable": true,
            "example": "some text"
          },
          "route": {
            "type": "string",
            "description": "Route",
            "nullable": true,
            "example": "some text"
          },
          "requestHeaders": {
            "type": "string",
            "description": "Request headers",
            "nullable": true,
            "example": "some text"
          },
          "requestPayload": {
            "type": "string",
            "description": "Request payload",
            "nullable": true,
            "example": "some text"
          },
          "responseHeaders": {
            "type": "string",
            "description": "Response headers",
            "nullable": true,
            "example": "some text"
          },
          "responsePayload": {
            "type": "string",
            "description": "Response payload",
            "nullable": true,
            "example": "some text"
          },
          "status": {
            "type": "integer",
            "description": "Status",
            "format": "int32",
            "example": 1234
          },
          "delivery": {
            "type": "string",
            "description": "Delivery time",
            "format": "date-time",
            "nullable": true,
            "example": "2008-04-10T06:30:00.0000000+04:00"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.WhiteLabelItemDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "File name",
            "nullable": true,
            "example": "some text"
          },
          "size": {
            "$ref": "#/components/schemas/SixLabors.ImageSharp.Size"
          },
          "path": {
            "$ref": "#/components/schemas/ASC.Web.Api.ApiModels.ResponseDto.WhiteLabelItemPathDto"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.ApiModels.ResponseDto.WhiteLabelItemPathDto": {
        "type": "object",
        "properties": {
          "light": {
            "type": "string",
            "description": "Path to the light theme logo",
            "nullable": true,
            "example": "some text"
          },
          "dark": {
            "type": "string",
            "description": "Path to the dark theme logo",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.Models.CookieSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "lifeTime": {
            "type": "integer",
            "description": "Lifetime value in minutes",
            "format": "int32",
            "example": 1234
          },
          "enabled": {
            "type": "boolean",
            "description": "Specifies if the cookie settings are enabled or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.Models.DnsSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "dnsName": {
            "type": "string",
            "description": "DNS",
            "nullable": true,
            "example": "some text"
          },
          "enable": {
            "type": "boolean",
            "description": "Enabled or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.Models.EmployeeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "nullable": true,
            "example": "some text"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "some text"
          },
          "avatar": {
            "type": "string",
            "description": "Avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarOriginal": {
            "type": "string",
            "description": "Original size avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarMax": {
            "type": "string",
            "description": "Maximum size avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarMedium": {
            "type": "string",
            "description": "Medium size avatar",
            "nullable": true,
            "example": "some text"
          },
          "avatarSmall": {
            "type": "string",
            "description": "Small avatar",
            "nullable": true,
            "example": "some text"
          },
          "profileUrl": {
            "type": "string",
            "description": "Profile URL",
            "nullable": true,
            "example": "some text"
          },
          "hasAvatar": {
            "type": "boolean",
            "description": "Specifies if the user has an avatar or not",
            "example": true
          },
          "isAnonim": {
            "type": "boolean",
            "description": "Specifies if the user is an anonim or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.Models.GroupSummaryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID",
            "format": "uuid",
            "example": "75a5f745-f697-4418-b38d-0fe0d277e258"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "some text"
          },
          "manager": {
            "type": "string",
            "description": "Manager",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Api.Models.PasswordSettingsRequestsDto": {
        "type": "object",
        "properties": {
          "minLength": {
            "type": "integer",
            "description": "Minimum password length",
            "format": "int32",
            "example": 1234
          },
          "upperCase": {
            "type": "boolean",
            "description": "Specifies if the password must include the uppercase letters or not",
            "example": true
          },
          "digits": {
            "type": "boolean",
            "description": "Specifies if the password must include the digits or not",
            "example": true
          },
          "specSymbols": {
            "type": "boolean",
            "description": "Specifies if the password must include the special symbols or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Core.Notify.NotificationType": {
        "enum": [
          "Badges",
          "RoomsActivity",
          "DailyFeed",
          "UsefullTips"
        ],
        "type": "integer",
        "description": "[0 - Badges, 1 - Rooms activity, 2 - Daily feed, 3 - Usefull tips]",
        "format": "int32"
      },
      "ASC.Web.Core.RecaptchaType": {
        "enum": [
          "Default",
          "AndroidV2",
          "iOSV2",
          "hCaptcha"
        ],
        "type": "integer",
        "description": "[0 - Default, 1 - AndroidV2, 2 - iOSV2, 3 - hCaptcha]",
        "format": "int32"
      },
      "ASC.Web.Core.Utility.Settings.CustomColorThemesSettingsColorItem": {
        "type": "object",
        "properties": {
          "accent": {
            "type": "string",
            "description": "Accent color",
            "nullable": true,
            "example": "#4781D1"
          },
          "buttons": {
            "type": "string",
            "description": "Button color",
            "nullable": true,
            "example": "#5299E0"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Core.Utility.Settings.CustomColorThemesSettingsItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Theme ID",
            "format": "int32",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Theme name",
            "nullable": true,
            "example": "blue"
          },
          "main": {
            "$ref": "#/components/schemas/ASC.Web.Core.Utility.Settings.CustomColorThemesSettingsColorItem"
          },
          "text": {
            "$ref": "#/components/schemas/ASC.Web.Core.Utility.Settings.CustomColorThemesSettingsColorItem"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Core.Utility.Settings.WizardSettings": {
        "type": "object",
        "properties": {
          "completed": {
            "type": "boolean",
            "description": "Specifies if the Wizard settings are completed or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Core.WhiteLabel.AdditionalWhiteLabelSettings": {
        "type": "object",
        "properties": {
          "startDocsEnabled": {
            "type": "boolean",
            "description": "Specifies if the start document is enabled or not",
            "example": true
          },
          "helpCenterEnabled": {
            "type": "boolean",
            "description": "Specifies if the help center is enabled or not",
            "example": true
          },
          "feedbackAndSupportEnabled": {
            "type": "boolean",
            "description": "Specifies if feedback and support are available or not",
            "example": true
          },
          "feedbackAndSupportUrl": {
            "type": "string",
            "description": "Feedback and support URL",
            "nullable": true,
            "example": "some text"
          },
          "userForumEnabled": {
            "type": "boolean",
            "description": "Specifies if the user forum is enabled or not",
            "example": true
          },
          "userForumUrl": {
            "type": "string",
            "description": "User forum URL",
            "nullable": true,
            "example": "some text"
          },
          "videoGuidesEnabled": {
            "type": "boolean",
            "description": "Specifies if the video guides are enabled or not",
            "example": true
          },
          "videoGuidesUrl": {
            "type": "string",
            "description": "Video guides URL",
            "nullable": true,
            "example": "some text"
          },
          "salesEmail": {
            "type": "string",
            "description": "Sales email",
            "nullable": true,
            "example": "some text"
          },
          "buyUrl": {
            "type": "string",
            "description": "URL to pay for the portal",
            "nullable": true,
            "example": "some text"
          },
          "licenseAgreementsEnabled": {
            "type": "boolean",
            "description": "Specifies if the license agreements are enabled or not",
            "example": true
          },
          "licenseAgreementsUrl": {
            "type": "string",
            "description": "License agreements URL",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Core.WhiteLabel.AdditionalWhiteLabelSettingsWrapper": {
        "type": "object",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.AdditionalWhiteLabelSettings"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettings": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "description": "Company name",
            "nullable": true,
            "example": "some text"
          },
          "site": {
            "type": "string",
            "description": "Site",
            "format": "uri",
            "nullable": true,
            "example": "some text"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "format": "email",
            "nullable": true,
            "example": "some text"
          },
          "address": {
            "type": "string",
            "description": "Address",
            "nullable": true,
            "example": "some text"
          },
          "phone": {
            "type": "string",
            "description": "Phone",
            "format": "tel",
            "nullable": true,
            "example": "some text"
          },
          "IsLicensor": {
            "type": "boolean",
            "description": "Specifies if a company is a licensor or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettingsWrapper": {
        "type": "object",
        "properties": {
          "settings": {
            "$ref": "#/components/schemas/ASC.Web.Core.WhiteLabel.CompanyWhiteLabelSettings"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.Core.CustomNavigationItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "label": {
            "type": "string",
            "description": "Label",
            "nullable": true,
            "example": "Label"
          },
          "url": {
            "type": "string",
            "description": "URL",
            "format": "uri",
            "nullable": true,
            "example": "Url"
          },
          "bigImg": {
            "type": "string",
            "description": "Big image",
            "nullable": true,
            "example": "data:image\\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAGQAAABkAgMAAAANjH3HAAAADFBMVEUAAADJycnJycnJycmiuNtHAAAAA3RSTlMAf4C\\/aSLHAAAAyElEQVR4Xu3NsQ3CMBSE4YubFB4ilHQegdGSjWACvEpGoEyBYiL05AdnXUGHolx10lf82MmOpfLeo5UoJUhBlpKkRCnhUy7b9XCWkqQMUkYlXVHSf8kTvkHKqKQrSnopg5SRxTMklLmS1MwaSWpmCSQ1MyOzWGZCYrEMEFksA4QqlAFuJJYBcCKxjM3FMySeIfEMC2dMOONCGZZgmdr1ly3TSrJMK9EyJBaaGrHQikYstAiJZRYSyiQEdyg5S8Evckih\\/YPscsdej0H6dc0TYw4AAAAASUVORK5CYII="
          },
          "smallImg": {
            "type": "string",
            "description": "Small image",
            "nullable": true,
            "example": "data:image\\/png;base64,iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8\\/9hAAAAUUlEQVR4AWMY\\/KC5o\\/cAEP9HxxgKcSpCGELYADyu2E6mAQjNxBlAWPNxkHdwGkBIM3KYYDUAr2ZCAE+oH8eujrAXDsA0k2EAAtDXAGLx4MpsADUgvkRKUlqfAAAAAElFTkSuQmCC"
          },
          "showInMenu": {
            "type": "boolean",
            "description": "Show in menu or not",
            "example": true
          },
          "showOnHomePage": {
            "type": "boolean",
            "description": "Show on home page or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.Core.EmailActivationSettings": {
        "type": "object",
        "properties": {
          "show": {
            "type": "boolean",
            "description": "Shown or hidden",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.Core.TipsSettings": {
        "type": "object",
        "properties": {
          "show": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.UserControls.Management.AuthKey": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "example": "some text"
          },
          "value": {
            "type": "string",
            "description": "Value",
            "nullable": true,
            "example": "some text"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate": {
        "type": "object",
        "properties": {
          "selfSigned": {
            "type": "boolean",
            "description": "Specifies if a certificate is self-signed or not",
            "example": true
          },
          "crt": {
            "type": "string",
            "description": "Certificate",
            "nullable": true,
            "example": "some text"
          },
          "key": {
            "type": "string",
            "description": "Key",
            "nullable": true,
            "example": "some text"
          },
          "action": {
            "type": "string",
            "description": "Action",
            "nullable": true,
            "example": "some text"
          },
          "domainName": {
            "type": "string",
            "description": "Domain name",
            "nullable": true,
            "example": "some text"
          },
          "startDate": {
            "type": "string",
            "description": "Start date",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          },
          "expiredDate": {
            "type": "string",
            "description": "Expiration date",
            "format": "date-time",
            "example": "2008-04-10T06:30:00.0000000+04:00"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoFieldMapping": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "First name",
            "nullable": true,
            "example": "some text"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "nullable": true,
            "example": "some text"
          },
          "email": {
            "type": "string",
            "description": "Email",
            "nullable": true,
            "example": "some text"
          },
          "title": {
            "type": "string",
            "description": "Title",
            "nullable": true,
            "example": "some text"
          },
          "location": {
            "type": "string",
            "description": "Location",
            "nullable": true,
            "example": "some text"
          },
          "phone": {
            "type": "string",
            "description": "Phone",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpCertificateAdvanced": {
        "type": "object",
        "properties": {
          "verifyAlgorithm": {
            "type": "string",
            "description": "Verification algorithm",
            "nullable": true,
            "example": "some text"
          },
          "verifyAuthResponsesSign": {
            "type": "boolean",
            "description": "Specifies if the signatures of the SAML authentication responses sent to SP will be verified or not",
            "example": true
          },
          "verifyLogoutRequestsSign": {
            "type": "boolean",
            "description": "Specifies if the signatures of the SAML logout requests sent to SP will be verified or not",
            "example": true
          },
          "verifyLogoutResponsesSign": {
            "type": "boolean",
            "description": "Specifies if the signatures of the SAML logout responses sent to SP will be verified or not",
            "example": true
          },
          "decryptAlgorithm": {
            "type": "string",
            "description": "Decryption algorithm",
            "nullable": true,
            "example": "some text"
          },
          "decryptAssertions": {
            "type": "boolean",
            "description": "Specifies if the assertions will be decrypted or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpSettings": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string",
            "description": "Entity ID",
            "nullable": true,
            "example": "some text"
          },
          "ssoUrl": {
            "type": "string",
            "description": "SSO URL",
            "nullable": true,
            "example": "some text"
          },
          "ssoBinding": {
            "type": "string",
            "description": "SSO binding",
            "nullable": true,
            "example": "some text"
          },
          "sloUrl": {
            "type": "string",
            "description": "SLO URL",
            "nullable": true,
            "example": "some text"
          },
          "sloBinding": {
            "type": "string",
            "description": "SLO binding",
            "nullable": true,
            "example": "some text"
          },
          "nameIdFormat": {
            "type": "string",
            "description": "Name ID format",
            "nullable": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSettingsV2": {
        "type": "object",
        "properties": {
          "enableSso": {
            "type": "boolean",
            "description": "Specifies if SSO is enabled or not",
            "nullable": true,
            "example": true
          },
          "idpSettings": {
            "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpSettings"
          },
          "idpCertificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate"
            },
            "description": "List of IDP certificates",
            "nullable": true
          },
          "idpCertificateAdvanced": {
            "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoIdpCertificateAdvanced"
          },
          "spLoginLabel": {
            "type": "string",
            "description": "SP login label",
            "nullable": true,
            "example": "some text"
          },
          "spCertificates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoCertificate"
            },
            "description": "List of SP certificates",
            "nullable": true
          },
          "spCertificateAdvanced": {
            "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSpCertificateAdvanced"
          },
          "fieldMapping": {
            "$ref": "#/components/schemas/ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoFieldMapping"
          },
          "hideAuthPage": {
            "type": "boolean",
            "description": "Specifies if the authentication page will be hidden or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.UserControls.Management.SingleSignOnSettings.SsoSpCertificateAdvanced": {
        "type": "object",
        "properties": {
          "signingAlgorithm": {
            "type": "string",
            "description": "Signing algorithm",
            "nullable": true,
            "example": "some text"
          },
          "signAuthRequests": {
            "type": "boolean",
            "description": "Specifies if SP will sign the SAML authentication requests sent to IdP or not",
            "example": true
          },
          "signLogoutRequests": {
            "type": "boolean",
            "description": "Specifies if SP will sign the SAML logout requests sent to IdP or not",
            "example": true
          },
          "signLogoutResponses": {
            "type": "boolean",
            "description": "Specifies if sign the SAML logout responses sent to IdP or not",
            "example": true
          },
          "encryptAlgorithm": {
            "type": "string",
            "description": "Encryption algorithm",
            "nullable": true,
            "example": "some text"
          },
          "decryptAlgorithm": {
            "type": "string",
            "description": "Decryption algorithm",
            "nullable": true,
            "example": "some text"
          },
          "encryptAssertions": {
            "type": "boolean",
            "description": "Specifies if the assertions will be encrypted or not",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "ASC.Web.Studio.Utility.ConfirmType": {
        "enum": [
          "EmpInvite",
          "LinkInvite",
          "PortalSuspend",
          "PortalContinue",
          "PortalRemove",
          "DnsChange",
          "PortalOwnerChange",
          "Activation",
          "EmailChange",
          "EmailActivation",
          "PasswordChange",
          "ProfileRemove",
          "PhoneActivation",
          "PhoneAuth",
          "Auth",
          "TfaActivation",
          "TfaAuth",
          "Wizard"
        ],
        "type": "string",
        "description": "[0 - Emp invite, 1 - Link invite, 2 - Portal suspend, 3 - Portal continue, 4 - Portal remove, 5 - Dns change, 6 - Portal owner change, 7 - Activation, 8 - Email change, 9 - Email activation, 10 - Password change, 11 - Profile remove, 12 - Phone activation, 13 - Phone auth, 14 - Auth, 15 - Tfa activation, 16 - Tfa auth, 17 - Wizard]"
      },
      "ASC.Webhooks.Core.Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID",
            "format": "int32",
            "example": 1234
          },
          "route": {
            "type": "string",
            "description": "Route",
            "nullable": true,
            "example": "some text"
          },
          "method": {
            "type": "string",
            "description": "Method",
            "nullable": true,
            "example": "some text"
          },
          "disable": {
            "type": "boolean",
            "description": "Specifies if a webhook is disabled or not",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true,
            "readOnly": true,
            "example": "some text"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true,
            "readOnly": true,
            "example": "some text"
          }
        },
        "additionalProperties": false
      },
      "ASC.Webhooks.Core.WebhookGroupStatus": {
        "enum": [
          "None",
          "NotSent",
          "Status2xx",
          "Status3xx",
          "Status4xx",
          "Status5xx"
        ],
        "type": "integer",
        "description": "[0 - None, 1 - Not sent, 2 - Status2xx, 4 - Status3xx, 8 - Status4xx, 16 - Status5xx]",
        "format": "int32"
      },
      "Google.Authenticator.SetupCode": {
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "manualEntryKey": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "qrCodeSetupImageUrl": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SixLabors.ImageSharp.Size": {
        "type": "object",
        "properties": {
          "width": {
            "type": "integer",
            "format": "int32"
          },
          "height": {
            "type": "integer",
            "format": "int32"
          },
          "isEmpty": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "System.Func<ASC.Core.Common.Configuration.DataStoreConsumer, ASC.Core.Common.Configuration.DataStoreConsumer>": {
        "type": "object",
        "properties": {
          "target": {
            "nullable": true,
            "readOnly": true
          },
          "method": {
            "$ref": "#/components/schemas/System.Reflection.MethodInfo"
          }
        },
        "additionalProperties": false
      },
      "System.IntPtr": {
        "type": "object",
        "additionalProperties": false
      },
      "System.ModuleHandle": {
        "type": "object",
        "properties": {
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.Assembly": {
        "type": "object",
        "properties": {
          "definedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.TypeInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "exportedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "codeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "entryPoint": {
            "$ref": "#/components/schemas/System.Reflection.MethodInfo"
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "imageRuntimeVersion": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isDynamic": {
            "type": "boolean",
            "readOnly": true
          },
          "location": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reflectionOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "isFullyTrusted": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "escapedCodeBase": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "manifestModule": {
            "$ref": "#/components/schemas/System.Reflection.Module"
          },
          "modules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.Module"
            },
            "nullable": true,
            "readOnly": true
          },
          "globalAssemblyCache": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "hostContext": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "securityRuleSet": {
            "$ref": "#/components/schemas/System.Security.SecurityRuleSet"
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.CallingConventions": {
        "enum": [
          1,
          2,
          3,
          32,
          64
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Reflection.ConstructorInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "module": {
            "$ref": "#/components/schemas/System.Reflection.Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/System.Reflection.MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/System.Reflection.MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/System.Reflection.CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/System.RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/System.Reflection.MemberTypes"
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.CustomAttributeData": {
        "type": "object",
        "properties": {
          "attributeType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "constructor": {
            "$ref": "#/components/schemas/System.Reflection.ConstructorInfo"
          },
          "constructorArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeTypedArgument"
            },
            "nullable": true,
            "readOnly": true
          },
          "namedArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeNamedArgument"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.CustomAttributeNamedArgument": {
        "type": "object",
        "properties": {
          "memberInfo": {
            "$ref": "#/components/schemas/System.Reflection.MemberInfo"
          },
          "typedValue": {
            "$ref": "#/components/schemas/System.Reflection.CustomAttributeTypedArgument"
          },
          "memberName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isField": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.CustomAttributeTypedArgument": {
        "type": "object",
        "properties": {
          "argumentType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "value": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.EventAttributes": {
        "enum": [
          0,
          512,
          1024
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Reflection.EventInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "module": {
            "$ref": "#/components/schemas/System.Reflection.Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/System.Reflection.MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/System.Reflection.EventAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "addMethod": {
            "$ref": "#/components/schemas/System.Reflection.MethodInfo"
          },
          "removeMethod": {
            "$ref": "#/components/schemas/System.Reflection.MethodInfo"
          },
          "raiseMethod": {
            "$ref": "#/components/schemas/System.Reflection.MethodInfo"
          },
          "isMulticast": {
            "type": "boolean",
            "readOnly": true
          },
          "eventHandlerType": {
            "$ref": "#/components/schemas/System.Type"
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.FieldAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          4096,
          8192,
          32768,
          38144
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Reflection.FieldInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "module": {
            "$ref": "#/components/schemas/System.Reflection.Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/System.Reflection.MemberTypes"
          },
          "attributes": {
            "$ref": "#/components/schemas/System.Reflection.FieldAttributes"
          },
          "fieldType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "isInitOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isLiteral": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotSerialized": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "isPinvokeImpl": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "fieldHandle": {
            "$ref": "#/components/schemas/System.RuntimeFieldHandle"
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.GenericParameterAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          16,
          28
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Reflection.ICustomAttributeProvider": {
        "type": "object",
        "additionalProperties": false
      },
      "System.Reflection.MemberInfo": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/System.Reflection.MemberTypes"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "module": {
            "$ref": "#/components/schemas/System.Reflection.Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.MemberTypes": {
        "enum": [
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          191
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Reflection.MethodAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          32768,
          53248
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Reflection.MethodBase": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/System.Reflection.MemberTypes"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "module": {
            "$ref": "#/components/schemas/System.Reflection.Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/System.Reflection.MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/System.Reflection.MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/System.Reflection.CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/System.RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.MethodImplAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          4096,
          65535
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Reflection.MethodInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "module": {
            "$ref": "#/components/schemas/System.Reflection.Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/System.Reflection.MethodAttributes"
          },
          "methodImplementationFlags": {
            "$ref": "#/components/schemas/System.Reflection.MethodImplAttributes"
          },
          "callingConvention": {
            "$ref": "#/components/schemas/System.Reflection.CallingConventions"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructor": {
            "type": "boolean",
            "readOnly": true
          },
          "isFinal": {
            "type": "boolean",
            "readOnly": true
          },
          "isHideBySig": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isStatic": {
            "type": "boolean",
            "readOnly": true
          },
          "isVirtual": {
            "type": "boolean",
            "readOnly": true
          },
          "isAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyAndAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isFamilyOrAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethod": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "methodHandle": {
            "$ref": "#/components/schemas/System.RuntimeMethodHandle"
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/System.Reflection.MemberTypes"
          },
          "returnParameter": {
            "$ref": "#/components/schemas/System.Reflection.ParameterInfo"
          },
          "returnType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "returnTypeCustomAttributes": {
            "$ref": "#/components/schemas/System.Reflection.ICustomAttributeProvider"
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.Module": {
        "type": "object",
        "properties": {
          "assembly": {
            "$ref": "#/components/schemas/System.Reflection.Assembly"
          },
          "fullyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "mdStreamVersion": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "moduleVersionId": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "scopeName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "moduleHandle": {
            "$ref": "#/components/schemas/System.ModuleHandle"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.ParameterAttributes": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          4096,
          8192,
          16384,
          32768,
          61440
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Reflection.ParameterInfo": {
        "type": "object",
        "properties": {
          "attributes": {
            "$ref": "#/components/schemas/System.Reflection.ParameterAttributes"
          },
          "member": {
            "$ref": "#/components/schemas/System.Reflection.MemberInfo"
          },
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "parameterType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "position": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isIn": {
            "type": "boolean",
            "readOnly": true
          },
          "isLcid": {
            "type": "boolean",
            "readOnly": true
          },
          "isOptional": {
            "type": "boolean",
            "readOnly": true
          },
          "isOut": {
            "type": "boolean",
            "readOnly": true
          },
          "isRetval": {
            "type": "boolean",
            "readOnly": true
          },
          "defaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "rawDefaultValue": {
            "nullable": true,
            "readOnly": true
          },
          "hasDefaultValue": {
            "type": "boolean",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.PropertyAttributes": {
        "enum": [
          0,
          512,
          1024,
          4096,
          8192,
          16384,
          32768,
          62464
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Reflection.PropertyInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "module": {
            "$ref": "#/components/schemas/System.Reflection.Module"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/System.Reflection.MemberTypes"
          },
          "propertyType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "attributes": {
            "$ref": "#/components/schemas/System.Reflection.PropertyAttributes"
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "getMethod": {
            "$ref": "#/components/schemas/System.Reflection.MethodInfo"
          },
          "setMethod": {
            "$ref": "#/components/schemas/System.Reflection.MethodInfo"
          }
        },
        "additionalProperties": false
      },
      "System.Reflection.TypeAttributes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          16,
          24,
          32,
          128,
          256,
          1024,
          2048,
          4096,
          8192,
          16384,
          65536,
          131072,
          196608,
          262144,
          264192,
          1048576,
          12582912
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Reflection.TypeInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/System.Reflection.MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/System.Reflection.Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/System.Reflection.Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/System.Reflection.MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "isFunctionPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnmanagedFunctionPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/System.Reflection.GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/System.Reflection.TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/System.Runtime.InteropServices.StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/System.Reflection.ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/System.RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredConstructors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.ConstructorInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.EventInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.FieldInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.MemberInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.MethodInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredNestedTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.TypeInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "declaredProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.PropertyInfo"
            },
            "nullable": true,
            "readOnly": true
          },
          "implementedInterfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Type"
            },
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "System.Runtime.InteropServices.LayoutKind": {
        "enum": [
          0,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Runtime.InteropServices.StructLayoutAttribute": {
        "type": "object",
        "properties": {
          "typeId": {
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "$ref": "#/components/schemas/System.Runtime.InteropServices.LayoutKind"
          }
        },
        "additionalProperties": false
      },
      "System.RuntimeFieldHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/System.IntPtr"
          }
        },
        "additionalProperties": false
      },
      "System.RuntimeMethodHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/System.IntPtr"
          }
        },
        "additionalProperties": false
      },
      "System.RuntimeTypeHandle": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/System.IntPtr"
          }
        },
        "additionalProperties": false
      },
      "System.Security.SecurityRuleSet": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "System.Type": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Reflection.CustomAttributeData"
            },
            "nullable": true,
            "readOnly": true
          },
          "isCollectible": {
            "type": "boolean",
            "readOnly": true
          },
          "metadataToken": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isInterface": {
            "type": "boolean",
            "readOnly": true
          },
          "memberType": {
            "$ref": "#/components/schemas/System.Reflection.MemberTypes"
          },
          "namespace": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assemblyQualifiedName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "fullName": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "assembly": {
            "$ref": "#/components/schemas/System.Reflection.Assembly"
          },
          "module": {
            "$ref": "#/components/schemas/System.Reflection.Module"
          },
          "isNested": {
            "type": "boolean",
            "readOnly": true
          },
          "declaringType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "declaringMethod": {
            "$ref": "#/components/schemas/System.Reflection.MethodBase"
          },
          "reflectedType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "underlyingSystemType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "isTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isConstructedGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericMethodParameter": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericType": {
            "type": "boolean",
            "readOnly": true
          },
          "isGenericTypeDefinition": {
            "type": "boolean",
            "readOnly": true
          },
          "isSZArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isVariableBoundArray": {
            "type": "boolean",
            "readOnly": true
          },
          "isByRefLike": {
            "type": "boolean",
            "readOnly": true
          },
          "isFunctionPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnmanagedFunctionPointer": {
            "type": "boolean",
            "readOnly": true
          },
          "hasElementType": {
            "type": "boolean",
            "readOnly": true
          },
          "genericTypeArguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/System.Type"
            },
            "nullable": true,
            "readOnly": true
          },
          "genericParameterPosition": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "genericParameterAttributes": {
            "$ref": "#/components/schemas/System.Reflection.GenericParameterAttributes"
          },
          "attributes": {
            "$ref": "#/components/schemas/System.Reflection.TypeAttributes"
          },
          "isAbstract": {
            "type": "boolean",
            "readOnly": true
          },
          "isImport": {
            "type": "boolean",
            "readOnly": true
          },
          "isSealed": {
            "type": "boolean",
            "readOnly": true
          },
          "isSpecialName": {
            "type": "boolean",
            "readOnly": true
          },
          "isClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedAssembly": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamANDAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamily": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedFamORAssem": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "isNestedPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isPublic": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isExplicitLayout": {
            "type": "boolean",
            "readOnly": true
          },
          "isLayoutSequential": {
            "type": "boolean",
            "readOnly": true
          },
          "isAnsiClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isAutoClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isUnicodeClass": {
            "type": "boolean",
            "readOnly": true
          },
          "isCOMObject": {
            "type": "boolean",
            "readOnly": true
          },
          "isContextful": {
            "type": "boolean",
            "readOnly": true
          },
          "isEnum": {
            "type": "boolean",
            "readOnly": true
          },
          "isMarshalByRef": {
            "type": "boolean",
            "readOnly": true
          },
          "isPrimitive": {
            "type": "boolean",
            "readOnly": true
          },
          "isValueType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSignatureType": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecuritySafeCritical": {
            "type": "boolean",
            "readOnly": true
          },
          "isSecurityTransparent": {
            "type": "boolean",
            "readOnly": true
          },
          "structLayoutAttribute": {
            "$ref": "#/components/schemas/System.Runtime.InteropServices.StructLayoutAttribute"
          },
          "typeInitializer": {
            "$ref": "#/components/schemas/System.Reflection.ConstructorInfo"
          },
          "typeHandle": {
            "$ref": "#/components/schemas/System.RuntimeTypeHandle"
          },
          "guid": {
            "type": "string",
            "format": "uuid",
            "readOnly": true
          },
          "baseType": {
            "$ref": "#/components/schemas/System.Type"
          },
          "isSerializable": {
            "type": "boolean",
            "readOnly": true,
            "deprecated": true
          },
          "containsGenericParameters": {
            "type": "boolean",
            "readOnly": true
          },
          "isVisible": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "asc_auth_key": {
        "type": "apiKey",
        "in": "cookie"
      }
    }
  }
}